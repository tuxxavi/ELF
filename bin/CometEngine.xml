<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CometEngine</name>
    </assembly>
    <members>
        <member name="P:CometEngine.Audio.AudioMixer.outputAudioMixerGroup">
            <summary>
            The output mixer group of this audio mixer
            </summary>
        </member>
        <member name="P:CometEngine.Audio.AudioMixer.master">
            <summary>
            The master group of the mixer
            </summary>
        </member>
        <member name="P:CometEngine.Audio.AudioMixer.defaultLayout">
            <summary>
            The default layout
            </summary>
        </member>
        <member name="P:CometEngine.Audio.AudioMixer.currentActiveLayout">
            <summary>
            The current active layout
            </summary>
        </member>
        <member name="M:CometEngine.Audio.AudioMixer.GetLayouts">
            <summary>
            Get all layouts
            </summary>
        </member>
        <member name="P:CometEngine.Audio.AudioMixerGroup.outputAudioMixerGroup">
            <summary>
            The output of this mixer group
            </summary>
        </member>
        <member name="P:CometEngine.Audio.AudioMixerGroup.mixer">
            <summary>
            The mixer of this group
            </summary>
        </member>
        <member name="P:CometEngine.Audio.AudioMixerGroup.childCount">
            <summary>
            Child count
            </summary>
        </member>
        <member name="P:CometEngine.Audio.AudioMixerGroup.volume">
            <summary>
            The mixer group volume
            </summary>
        </member>
        <member name="P:CometEngine.Audio.AudioMixerGroup.pitch">
            <summary>
            The mixer group pitch
            </summary>
        </member>
        <member name="P:CometEngine.Audio.AudioMixerGroup.muted">
            <summary>
            Is the mixer group muted?
            </summary>
        </member>
        <member name="P:CometEngine.Audio.AudioMixerGroup.useEffects">
            <summary>
            Is this group affected by effects?
            </summary>
        </member>
        <member name="M:CometEngine.Audio.AudioMixerGroup.GetChildren">
            <summary>
            Get children
            </summary>
        </member>
        <member name="P:CometEngine.Audio.AudioMixerLayout.mixer">
            <summary>
            The mixer of this layout
            </summary>
        </member>
        <member name="P:CometEngine.Audio.AudioMixerLayout.isActive">
            <summary>
            Is this layout active?
            </summary>
        </member>
        <member name="P:CometEngine.Audio.AudioMixerLayout.isDefault">
            <summary>
            Is this layout the default?
            </summary>
        </member>
        <member name="M:CometEngine.Audio.AudioMixerLayout.Activate">
            <summary>
            Set this layout as the currentActive in the mixer
            </summary>
        </member>
        <member name="E:CometEngine.InputSettings.InputAction.onPerformed">
            <summary>
            Callback called when action is done
            </summary>
        </member>
        <member name="P:CometEngine.InputSettings.InputAction.isActionDone">
            <summary>
            True if action is done this frame
            </summary>
        </member>
        <member name="P:CometEngine.InputSettings.InputAction.enabled">
            <summary>
            Enable/Disable the action. If disabled, no callbacks will be called of this action
            </summary>
        </member>
        <member name="P:CometEngine.InputSettings.InputAction.name">
            <summary>
            Action name
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputAction.GetBindings">
            <summary>
            Returns an array of Bindings
            </summary>
        </member>
        <member name="P:CometEngine.InputSettings.InputAction.bindingsSize">
            <summary>
            Number of bindings
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputAction.GetValueAsVector2">
            <summary>
            Returns the current value of the first binding that has been executed and fits a value of Vector2 such as joysticks
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputAction.GetValueAsFloat">
            <summary>
            Returns the current value of the first binding that has been executed and fits a value of float such as MouseWheel, right and left gamePad triggers...
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputAction.RemoveBinding(System.Int32)">
            <summary>
            Returns true if it removes the binding that has bindingIndex
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputAction.AddBinding">
            <summary>
            Returns the new binding
            </summary>
        </member>
        <member name="P:CometEngine.InputSettings.InputBinding.device">
            <summary>
            Device in which this binding belongs to
            </summary>
        </member>
        <member name="P:CometEngine.InputSettings.InputBinding.type">
            <summary>
            Type, single or multiple, depends on the amount of keys it has
            </summary>
        </member>
        <member name="P:CometEngine.InputSettings.InputBinding.keysSize">
            <summary>
            Number of keys
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputBinding.GetKeys">
            <summary>
            Returns an array of the keys
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputBinding.RemoveKey(System.Int32)">
            <summary>
            Returns true if it removes the key that has keyIndex. Keys can only be removed if there is more than one.
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputBinding.AddKey">
            <summary>
            Returns the new Key, it only works if type == BindingType.MULTIPLE
            </summary>
        </member>
        <member name="P:CometEngine.InputSettings.InputGroup.actionsSize">
            <summary>
            Returns the number of the actions
            </summary>
        </member>
        <member name="P:CometEngine.InputSettings.InputGroup.enabled">
            <summary>
            Enable/Disable the group. If disabled, no callbacks will be called of the actions of the group
            </summary>
        </member>
        <member name="P:CometEngine.InputSettings.InputGroup.name">
            <summary>
            Action name
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputGroup.RemoveAction(System.String)">
            <summary>
            Returns true if it removes action called actionName
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputGroup.AddAction(System.String)">
            <summary>
            Returns the action if it creates a new action called actionName otherwise returns null
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputGroup.GetActionByName(System.String)">
            <summary>
            Returns the action if it finds an action called actionName, otherwise returns null
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputGroup.GetActions">
            <summary>
            Returns an array of all InputActions
            </summary>
        </member>
        <member name="P:CometEngine.InputSettings.Key.keyType">
            <summary>
            Type of the key
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.Key.GetKeyboardKey(CometEngine.InputSettings.KeyboardKey@)">
            <summary>
            Returns true if the key is a keyboard key and returns it as an out value
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.Key.SetKeyboardKey(CometEngine.InputSettings.KeyboardKey)">
            <summary>
            Returns true if the key is set correctly
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.Key.GetMouseButtonKey(CometEngine.InputSettings.MouseButtonKey@)">
            <summary>
            Returns true if the key is a mouse button key and returns it as an out value
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.Key.SetMouseButtonKey(CometEngine.InputSettings.MouseButtonKey)">
            <summary>
            Returns true if the key is set correctly
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.Key.GetControllerButtonKey(CometEngine.InputSettings.ControllerButtonKey@)">
            <summary>
            Returns true if the key is a controller button and returns it as an out value
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.Key.SetControllerButtonKey(CometEngine.InputSettings.ControllerButtonKey)">
            <summary>
            Returns true if the key is set correctly
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.Key.GetMouseMotionKey(CometEngine.InputSettings.MouseMotionKey@)">
            <summary>
            Returns true if the key is a mouse motion and returns it as an out value
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.Key.SetMouseMotionKey(CometEngine.InputSettings.MouseMotionKey)">
            <summary>
            Returns true if the key is set correctly
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.Key.GetMouseWheelKey(CometEngine.InputSettings.MouseWheelKey@)">
            <summary>
            Returns true if the key is a mouse wheel and returns it as an out value
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.Key.SetMouseWheelKey(CometEngine.InputSettings.MouseWheelKey)">
            <summary>
            Returns true if the key is set correctly
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.Key.GetControllerAxisKey(CometEngine.InputSettings.ControllerAxisKey@)">
            <summary>
            Returns true if the key is a controller axis and returns it as an out value
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.Key.SetControllerAxisKey(CometEngine.InputSettings.ControllerAxisKey)">
            <summary>
            Returns true if the key is set correctly
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.Key.GetControllerTriggerKey(CometEngine.InputSettings.ControllerTriggerKey@)">
            <summary>
            Returns true if the key is a controller trigger and returns it as an out value
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.Key.SetControllerTriggerKey(CometEngine.InputSettings.ControllerTriggerKey)">
            <summary>
            Returns true if the key is set correctly
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputSettings.Load">
            <summary>
            Load the settings from file
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputSettings.Save">
            <summary>
            Save current settings to file
            </summary>
        </member>
        <member name="P:CometEngine.InputSettings.InputSettings.joystickDeadZone">
            <summary>
            Current value between 0 - 1 of the joystick dead zone
            </summary>
        </member>
        <member name="P:CometEngine.InputSettings.InputSettings.triggerDeadZone">
            <summary>
            Current value between 0 - 1 of the triggers dead zone
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputSettings.GetControllerName(CometEngine.ControllerNumber)">
            <summary>
            Returns the name of the controller or null if controllerNumber does no exist
            </summary>
        </member>
        <member name="P:CometEngine.InputSettings.InputSettings.controllersActive">
            <summary>
            Number of active controllers
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputSettings.GetKeyName(CometEngine.KeyCode)">
            <summary>
            Returns the name of the keyboard key
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputSettings.GetControllerButtonName(CometEngine.ControllerCode)">
            <summary>
            Returns the name of the controller button
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputSettings.GetMouseButtonName(CometEngine.MouseCode)">
            <summary>
            Returns the name of the mouse button
            </summary>
        </member>
        <member name="P:CometEngine.InputSettings.InputSettings.groupsSize">
            <summary>
            Returns the number of the groups
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputSettings.RemoveGroup(System.String)">
            <summary>
            Returns true if it removes group called groupName
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputSettings.AddGroup(System.String)">
            <summary>
            Returns the group if it creates a new group called newGroupName otherwise returns null
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputSettings.GetGroupByName(System.String)">
            <summary>
            Returns the group if it finds a group called groupName, otherwise returns null
            </summary>
        </member>
        <member name="M:CometEngine.InputSettings.InputSettings.GetGroups">
            <summary>
            Returns an array of all InputGroup
            </summary>
        </member>
        <member name="F:CometEngine.SceneManagement.LoadSceneMode.SINGLE_AND_CLEAR_ALL">
            <summary>
            Destroy the immutable scene
            </summary>
        </member>
        <member name="P:CometEngine.SceneManagement.SceneManager.scenesLoadedCount">
            <summary>
            Number of scenes currently loaded
            </summary>
        </member>
        <member name="P:CometEngine.SceneManagement.SceneManager.scenesBuildSettingsCount">
            <summary>
            Number of scenes added in build settings
            </summary>
        </member>
        <member name="P:CometEngine.SceneManagement.SceneManager.activeScene">
            <summary>
            The scene active
            </summary>
        </member>
        <member name="M:CometEngine.SceneManagement.SceneManager.CreateScene(System.String)">
            <summary>
            Returns a new scene that is opened additively.
            </summary>
        </member>
        <member name="M:CometEngine.SceneManagement.SceneManager.GetSceneLoadedAt(System.Int32)">
            <summary>
            Returns the scene with index in the scenes loaded list
            </summary>
        </member>
        <member name="M:CometEngine.SceneManagement.SceneManager.GetSceneBuildSettingsAt(System.Int32)">
            <summary>
            Returns the scene that with buildSettingsIndex
            </summary>
        </member>
        <member name="M:CometEngine.SceneManagement.SceneManager.GetSceneByName(System.String)">
            <summary>
            Returns the scene with name in the list of the scenes loaded
            </summary>
        </member>
        <member name="M:CometEngine.SceneManagement.SceneManager.GetSceneByPath(System.String)">
            <summary>
            Returns the scene with path in the list of the scenes loaded
            </summary>
        </member>
        <member name="M:CometEngine.SceneManagement.SceneManager.LoadScene(System.Int32,CometEngine.SceneManagement.LoadSceneMode)">
            <summary>
            Loads the scene with x buildIndex
            </summary>
        </member>
        <member name="M:CometEngine.SceneManagement.SceneManager.LoadScene(System.String,CometEngine.SceneManagement.LoadSceneMode)">
            <summary>
            Loads the scene with name
            </summary>
        </member>
        <member name="M:CometEngine.SceneManagement.SceneManager.MergeScenes(CometEngine.SceneManagement.Scene,CometEngine.SceneManagement.Scene)">
            <summary>
            Move every GameObject in toMoveOut to toMoveIn and then removes toMoveOut scene
            </summary>
        </member>
        <member name="M:CometEngine.SceneManagement.SceneManager.SetSceneActive(CometEngine.SceneManagement.Scene)">
            <summary>
            Set a new active scene
            </summary>
        </member>
        <member name="M:CometEngine.SceneManagement.SceneManager.UnloadScene(System.Int32)">
            <summary>
            Unload the scene with index in the loaded scenes list. Only works if more than one scene is loaded
            </summary>
        </member>
        <member name="M:CometEngine.SceneManagement.SceneManager.UnloadScene(CometEngine.SceneManagement.Scene)">
            <summary>
            Unload the scene. Only works if more than one scene is loaded
            </summary>
        </member>
        <member name="M:CometEngine.SceneManagement.SceneManager.LoadSceneAsync(System.String,CometEngine.SceneManagement.LoadSceneMode)">
            <summary>
            Load a scene in background and return a handler to this operation
            </summary>
        </member>
        <member name="M:CometEngine.SceneManagement.SceneManager.LoadSceneAsync(System.Int32,CometEngine.SceneManagement.LoadSceneMode)">
            <summary>
            Load a scene in background and return a handler to this operation
            </summary>
        </member>
        <member name="M:CometEngine.SceneManagement.SceneManager.GetSceneAsyncOperations">
            <summary>
            Gets all the current active scene async operations.
            </summary>
            <returns>Returns an array that contains all the current active scene async operations. If there is not any operation, it will return null.</returns>
        </member>
        <member name="P:CometEngine.SceneManagement.Scene.buildIndex">
            <summary>
            Returns the index of the scene
            </summary>
        </member>
        <member name="P:CometEngine.SceneManagement.Scene.isLoaded">
            <summary>
            Returns true if the scene is loaded
            </summary>
        </member>
        <member name="P:CometEngine.SceneManagement.Scene.name">
            <summary>
            Returns the name of the scene
            </summary>
        </member>
        <member name="P:CometEngine.SceneManagement.Scene.path">
            <summary>
            Returns the local path of the scene --> Assets/...
            </summary>
        </member>
        <member name="P:CometEngine.SceneManagement.Scene.numRootGOs">
            <summary>
            Returns the number of roots of the scene
            </summary>
        </member>
        <member name="P:CometEngine.SceneManagement.Scene.isEnabled">
            <summary>
            Returns true if the scene root is enabled
            </summary>
        </member>
        <member name="M:CometEngine.SceneManagement.Scene.SetEnable(System.Boolean)">
            <summary>
            Set the root state, if disabled, all gameObjects in this scene are disabled
            </summary>
        </member>
        <member name="M:CometEngine.SceneManagement.Scene.GetRoots">
            <summary>
            Returns an array of GameObjects that contains every root of the scene
            </summary>
        </member>
        <member name="P:CometEngine.SceneManagement.Scene.isValid">
            <summary>
            Returns true if the scene exists
            </summary>
        </member>
        <member name="P:CometEngine.Tilemaps.Grid.cellType">
            <summary>
            The grid cell type
            </summary>
        </member>
        <member name="P:CometEngine.Tilemaps.Grid.cellSize">
            <summary>
            The size of each cell
            </summary>
        </member>
        <member name="M:CometEngine.Tilemaps.Grid.WorldPositonToCellPosition(CometEngine.Vector2)">
            <summary>
            Returns the cell position of a world position
            </summary>
            <returns></returns>
        </member>
        <member name="M:CometEngine.Tilemaps.Grid.CellPositionToWorldPosition(CometEngine.Vector2i)">
            <summary>
            Returns the cell position of a world position
            </summary>
            <returns></returns>
        </member>
        <member name="M:CometEngine.Tilemaps.Grid.RelativeWorldPositionToCellPosition(CometEngine.Vector2,CometEngine.Transform)">
            <summary>
            Returns the cell position relative to a transform from a world position
            </summary>
            <returns></returns>
        </member>
        <member name="M:CometEngine.Tilemaps.Grid.RelativeCellPositionToWorldPosition(CometEngine.Vector2i,CometEngine.Transform)">
            <summary>
            Returns the world position from a relative cell position
            </summary>
            <returns></returns>
        </member>
        <member name="P:CometEngine.Tilemaps.TilemapRenderer.animationFrameRate">
            <summary>
            Animation frame rate of all tiles of the tilemap
            </summary>
        </member>
        <member name="P:CometEngine.Tilemaps.TilemapRenderer.color">
            <summary>
            Color applied to every tile of the tilemap
            </summary>
        </member>
        <member name="P:CometEngine.Tilemaps.TilemapRenderer.tileAnchor">
            <summary>
            Color applied to every tile of the tilemap
            </summary>
        </member>
        <member name="P:CometEngine.Tilemaps.TilemapRenderer.sortingOrder">
            <summary>
            Sorting order of all the tiles
            </summary>
        </member>
        <member name="P:CometEngine.Tilemaps.TilemapRenderer.renderingMode">
            <summary>
            Rendering mode of all tiles
            </summary>
        </member>
        <member name="P:CometEngine.Tilemaps.TilemapRenderer.rect">
            <summary>
            The rect that contains all tiles in grid cells where X is left and Y is top
            </summary>
        </member>
        <member name="P:CometEngine.Tilemaps.TilemapRenderer.grid">
            <summary>
            The grid this tilemap is attached to
            </summary>
        </member>
        <member name="M:CometEngine.Tilemaps.TilemapRenderer.ClearAllTiles">
            <summary>
            Removes all tiles that are placed in the tilemap
            </summary>
        </member>
        <member name="M:CometEngine.Tilemaps.TilemapRenderer.ContainsTile(CometEngine.Tilemaps.TileBase)">
            <summary>
            Returns true if the Tilemap contains the given tile. Returns false if not
            </summary>
        </member>
        <member name="M:CometEngine.Tilemaps.TilemapRenderer.GetColor(CometEngine.Vector2i)">
            <summary>
            Returns the color of the tile at tilePosition
            </summary>
        </member>
        <member name="M:CometEngine.Tilemaps.TilemapRenderer.GetSprite(CometEngine.Vector2i)">
            <summary>
            Returns the sprite of the tile at tilePosition
            </summary>
        </member>
        <member name="M:CometEngine.Tilemaps.TilemapRenderer.GetTile(CometEngine.Vector2i)">
            <summary>
            Returns the tile at tilePosition
            </summary>
        </member>
        <member name="M:CometEngine.Tilemaps.TilemapRenderer.GetUniqueTileCount">
            <summary>
            Returns the number of different tiles that are placed in the tilemap
            </summary>
        </member>
        <member name="M:CometEngine.Tilemaps.TilemapRenderer.GetUniqueTileCountOf(CometEngine.Tilemaps.TileBase)">
            <summary>
            Returns the amount of tiles of tile that are placed in the tilemap
            </summary>
        </member>
        <member name="M:CometEngine.Tilemaps.TilemapRenderer.HasTile(CometEngine.Vector2i)">
            <summary>
            Returns true if there is a tile at tilePosition. Returns false if not
            </summary>
        </member>
        <member name="M:CometEngine.Tilemaps.TilemapRenderer.RefreshAllTiles">
            <summary>
            Refreshes all tile in the tilemap
            </summary>
        </member>
        <member name="M:CometEngine.Tilemaps.TilemapRenderer.RefreshTile(CometEngine.Vector2i)">
            <summary>
            Refresh the tile at tilePosition
            </summary>
        </member>
        <member name="M:CometEngine.Tilemaps.TilemapRenderer.RefreshAllTilesOf(CometEngine.Tilemaps.TileBase)">
            <summary>
            Refresh all tiles of tile
            </summary>
        </member>
        <member name="M:CometEngine.Tilemaps.TilemapRenderer.SetColor(CometEngine.Vector2i,CometEngine.Color)">
            <summary>
            Set the tile color at tilePosition
            </summary>
        </member>
        <member name="M:CometEngine.Tilemaps.TilemapRenderer.SetTile(CometEngine.Vector2i,CometEngine.Tilemaps.TileBase)">
            <summary>
            Set the tile at tilePosition. If setting more than one, better call SetTiles for performance
            </summary>
        </member>
        <member name="M:CometEngine.Tilemaps.TilemapRenderer.SetTiles(CometEngine.Vector2i[],CometEngine.Tilemaps.TileBase[])">
            <summary>
            Set the tiles at tilePositions
            </summary>
        </member>
        <member name="M:CometEngine.Tilemaps.TilemapRenderer.ChangeTile(CometEngine.Tilemaps.TileBase,CometEngine.Tilemaps.TileBase)">
            <summary>
            Changes all the oldTIiles for the newTiles 
            </summary>
        </member>
        <member name="F:CometEngine.Tilemaps.AnimatedTile.color">
            <summary>
            Color of the tile
            </summary>
        </member>
        <member name="F:CometEngine.Tilemaps.AnimatedTile.minimumSpeed">
            <summary>
            Minimum speed of the animation. Choosen randomly between min and max
            </summary>
        </member>
        <member name="F:CometEngine.Tilemaps.AnimatedTile.maximumSpeed">
            <summary>
            Maximum speed of the animation. Choosen randomly between min and max
            </summary>
        </member>
        <member name="F:CometEngine.Tilemaps.AnimatedTile.startFrame">
            <summary>
            Start frame of the animation
            </summary>
        </member>
        <member name="F:CometEngine.Tilemaps.AnimatedTile.sprites">
            <summary>
            Sprites to be rendered at the tile as animation
            </summary>
        </member>
        <member name="F:CometEngine.Tilemaps.Tile.color">
            <summary>
            Color of the tile
            </summary>
        </member>
        <member name="F:CometEngine.Tilemaps.Tile.sprite">
            <summary>
            Sprite to be rendered at the tile
            </summary>
        </member>
        <member name="T:CometEngine.AnimatorStateBehaviour">
            <summary>
            It's the base class for every new Animator State Behaviour because it provides usefull callbacks.
            <list type="bullet">
            <item>
            <para>void Awake()</para>
            <para>-> Called when the script is loaded</para>
            </item>
            <item>
            <para>void OnStateEnter(Animator animator, AnimatorStateInfo animatorStateInfo)</para>
            <para>-> Called when animator enters the state</para>
            <br/>
            </item>
            <item>
            <para>void OnStateUpdate(Animator animator, AnimatorStateInfo animatorStateInfo)</para>
            <para>-> Called while animator is in the state</para>
            </item>
            <item>
            <para>void OnStateExit(Animator animator, AnimatorStateInfo animatorStateInfo)</para>
            <para>-> Called when animator exits the state</para>
            </item>
            <item>
            <para>void OnDestroy()</para>
            <para>-> Called when the script is destroyed</para>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:CometEngine.AssetIcon">
            <summary>
            Attribute that can be used with fields that are Sprite, Sprite[], Texture2D or Texture2D[] if they belong to a CometObject. If so, it will set the given Sprite/Texture2D as the icon of the asset inside the Panel Project.
            </summary>
        </member>
        <member name="T:CometEngine.AssetMenu">
            <summary>
            Marks a CometObject-derived type to be automatically added in the Assets/Create submenu, in order to create and store new instances in the project as ".cometObject" files.
            </summary>
        </member>
        <member name="M:CometEngine.AssetMenu.#ctor(System.String,System.String)">
            <summary>
            Adds a new entry to the Assets/Create submenu with the given data.
            </summary>
            <param name="newFileName">The default name of the asset once is created.</param>
            <param name="menuName">The path where this menu option will appear. Add slashes to create new submenus.</param>
        </member>
        <member name="T:CometEngine.Attribute">
            <summary>
            Base class for every Attribute.
            </summary>
        </member>
        <member name="T:CometEngine.UniqueAnimatorStateBehaviour">
            <summary>
            This will create only one copy of the AnimatorStateBehaviour, so all animators will share the same object
            </summary>
        </member>
        <member name="T:CometEngine.Collision">
            <summary>
            This object is destroyed once the OnCollisionXXX function returns
            </summary>
        </member>
        <member name="P:CometEngine.Collision.colliderA">
            <summary>
            The colliderA involved in the collision with the colliderB
            </summary>
        </member>
        <member name="P:CometEngine.Collision.colliderB">
            <summary>
            The colliderB involved in the collision with the colliderA
            </summary>
        </member>
        <member name="P:CometEngine.Collision.rigidBodyA">
            <summary>
            The rigidBodyA involved in the collision with the rigidBodyB
            </summary>
        </member>
        <member name="P:CometEngine.Collision.rigidBodyB">
            <summary>
            The rigidBodyB involved in the collision with the rigidBodyA
            </summary>
        </member>
        <member name="P:CometEngine.Collision.transform">
            <summary>
            The Transform of the incoming object involved in the collision
            </summary>
        </member>
        <member name="P:CometEngine.Collision.gameObject">
            <summary>
            The incoming GameObject involved in the collision
            </summary>
        </member>
        <member name="P:CometEngine.Collision.contactPointsCount">
            <summary>
            The number of contact points
            </summary>
        </member>
        <member name="M:CometEngine.Collision.GetContactPoint">
            <summary>
            Returns the contact point
            </summary>
        </member>
        <member name="P:CometEngine.Component.gameObject">
            <summary>
            The gameObject this component is attached
            </summary>
        </member>
        <member name="P:CometEngine.Component.tag">
            <summary>
            The tag of the gameObject this component is attached
            </summary>
        </member>
        <member name="P:CometEngine.Component.transform">
            <summary>
            The transform of the gameObject this component is attached
            </summary>
        </member>
        <member name="M:CometEngine.Component.CompareTag(System.String)">
            <summary>
            Returns true if the tag is the same
            </summary>
        </member>
        <member name="M:CometEngine.Component.GetComponent(System.Type)">
            <summary>
            Returns the component or null if it does not exist
            </summary>
        </member>
        <member name="M:CometEngine.Component.GetComponent``1">
            <summary>
            Returns the component or null if it does not exist
            </summary>
        </member>
        <member name="M:CometEngine.Component.GetComponents(System.Type)">
            <summary>
            Returns an array of components found
            </summary>
        </member>
        <member name="M:CometEngine.Component.GetComponents``1">
            <summary>
            Returns an array of components found
            </summary>
        </member>
        <member name="M:CometEngine.Component.GetComponentInParent``1">
            <summary>
            Return the component or null if it does not exist
            </summary>
        </member>
        <member name="M:CometEngine.Component.GetComponentInParent(System.Type)">
            <summary>
            Return the component or null if it does not exist
            </summary>
        </member>
        <member name="M:CometEngine.Component.GetComponentsInParent(System.Type)">
            <summary>
            Returns an array of components found
            </summary>
        </member>
        <member name="M:CometEngine.Component.GetComponentsInParent``1">
            <summary>
            Returns an array of components found
            </summary>
        </member>
        <member name="M:CometEngine.Component.GetComponentInChildren(System.Type)">
            <summary>
            Return the component or null if it does not exist
            </summary>
        </member>
        <member name="M:CometEngine.Component.GetComponentInChildren``1">
            <summary>
            Return the component or null if it does not exist
            </summary>
        </member>
        <member name="M:CometEngine.Component.GetComponentsInChildren(System.Type)">
            <summary>
            Returns an array of components found
            </summary>
        </member>
        <member name="M:CometEngine.Component.GetComponentsInChildren``1">
            <summary>
            Returns an array of components found
            </summary>
        </member>
        <member name="M:CometEngine.Component.TryGetComponent(System.Type,CometEngine.Component@)">
            <summary>
            Returns true if the component exists and fill the component out parameter with it
            </summary>
        </member>
        <member name="M:CometEngine.Component.TryGetComponent``1(``0@)">
            <summary>
            Returns true if the component exists and fill the component out parameter with it
            </summary>
        </member>
        <member name="P:CometEngine.Component.enabled">
            <summary>
            Enable state of this component
            </summary>
        </member>
        <member name="M:CometEngine.Component.SendMessage(System.String)">
            <summary>
            Calls the methodName in every CometBehaviour in this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.Component.SendMessage(System.String,System.Object,System.Boolean)">
            <summary>
            Calls the methodName in every CometBehaviour in this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.Component.SendMessage(System.String,System.Object)">
            <summary>
            Calls the methodName in every CometBehaviour in this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.Component.SendMessage(System.String,System.Boolean)">
            <summary>
            Calls the methodName in every CometBehaviour in this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.Component.SendMessageDownwards(System.String)">
            <summary>
            Calls the methodName in every CometBehaviour downwards this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.Component.SendMessageDownwards(System.String,System.Object,System.Boolean)">
            <summary>
            Calls the methodName in every CometBehaviour downwards this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.Component.SendMessageDownwards(System.String,System.Object)">
            <summary>
            Calls the methodName in every CometBehaviour downwards this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.Component.SendMessageDownwards(System.String,System.Boolean)">
            <summary>
            Calls the methodName in every CometBehaviour downwards this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.Component.SendMessageUpwards(System.String)">
            <summary>
            Calls the methodName in every CometBehaviour upwards this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.Component.SendMessageUpwards(System.String,System.Object,System.Boolean)">
            <summary>
            Calls the methodName in every CometBehaviour upwards this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.Component.SendMessageUpwards(System.String,System.Object)">
            <summary>
            Calls the methodName in every CometBehaviour upwards this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.Component.SendMessageUpwards(System.String,System.Boolean)">
            <summary>
            Calls the methodName in every CometBehaviour upwards this gameObject
            </summary>
        </member>
        <member name="P:CometEngine.Animator.animatorController">
            <summary>
            The animator controller
            </summary>
        </member>
        <member name="P:CometEngine.Animator.applyRootMotion">
            <summary>
            Should root motion be applied?
            </summary>
        </member>
        <member name="P:CometEngine.Animator.keepStateOnDisable">
            <summary>
            Should animator stay at the current state when disabled and enabled again?
            </summary>
        </member>
        <member name="P:CometEngine.Animator.ignoreAnimationEvents">
            <summary>
            Should animation events be ignored by this animator?
            </summary>
        </member>
        <member name="P:CometEngine.Animator.speed">
            <summary>
            Speed of the animator that is applied while animating
            </summary>
        </member>
        <member name="P:CometEngine.Animator.updateTimeMode">
            <summary>
            Update time mode of the animator
            </summary>
        </member>
        <member name="P:CometEngine.Animator.parameterCount">
            <summary>
            Number of parameters
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetParameters">
            <summary>
            Array with the parameters of the controller
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetCurrentAnimationPlaying">
            <summary>
            Get the current animation clip playing
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetCurrentState(CometEngine.AnimatorStateInfo@)">
            <summary>
            Returns true if there is a current state
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetParameter(System.String,CometEngine.AnimatorControllerParameter@)">
            <summary>
            Returns true if the state exists
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetParameter(System.Int32,CometEngine.AnimatorControllerParameter@)">
            <summary>
            Returns true if the state exists
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetParameterID(System.String)">
            <summary>
            Returns the ID if the parameter exists, 0 if not
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetParameterID(System.Int32)">
            <summary>
            Returns the ID if the parameter exists, 0 if not
            </summary>
        </member>
        <member name="M:CometEngine.Animator.Play(System.String,System.Single)">
            <summary>
            Play a state with the full state name -> JumpStateMachine/JumpRight
            </summary>
        </member>
        <member name="M:CometEngine.Animator.SetDefaultParameterValues">
            <summary>
            Set parameters with the default value of the animator controller
            </summary>
        </member>
        <member name="M:CometEngine.Animator.SetInt(System.String,System.Int32)">
            <summary>
            Set the value of an int parameter with name
            </summary>
        </member>
        <member name="M:CometEngine.Animator.SetInt(System.UInt64,System.Int32)">
            <summary>
            Set the value of an int parameter by ID
            </summary>
        </member>
        <member name="M:CometEngine.Animator.SetFloat(System.String,System.Single)">
            <summary>
            Set the value of a float parameter with name
            </summary>
        </member>
        <member name="M:CometEngine.Animator.SetFloat(System.UInt64,System.Single)">
            <summary>
            Set the value of a float parameter by ID
            </summary>
        </member>
        <member name="M:CometEngine.Animator.SetBool(System.String,System.Boolean)">
            <summary>
            Set the value of a bool parameter with name
            </summary>
        </member>
        <member name="M:CometEngine.Animator.SetBool(System.UInt64,System.Boolean)">
            <summary>
            Set the value of a bool parameter by ID
            </summary>
        </member>
        <member name="M:CometEngine.Animator.SetTrigger(System.String)">
            <summary>
            Set a trigger parameter with name
            </summary>
        </member>
        <member name="M:CometEngine.Animator.SetTrigger(System.UInt64)">
            <summary>
            Set a trigger parameter by ID
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetInt(System.String)">
            <summary>
            Get the value of an int parameter with name
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetInt(System.UInt64)">
            <summary>
            Get the value of an int parameter by ID
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetFloat(System.String)">
            <summary>
            Get the value of a float parameter with name
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetFloat(System.UInt64)">
            <summary>
            Get the value of a float parameter by ID
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetBool(System.String)">
            <summary>
            Get the value of a bool parameter with name
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetBool(System.UInt64)">
            <summary>
            Get the value of a bool parameter by ID
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetTrigger(System.String)">
            <summary>
            Get the value of a trigger parameter with name
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetTrigger(System.UInt64)">
            <summary>
            Get the value of a trigger parameter by ID
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetBehaviour(System.Type)">
            <summary>
            Returns the first AnimatorStateBehaviour that matches Type or is derived from Type. Returns null if none are found.
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetBehaviour``1">
            <summary>
            Returns the first AnimatorStateBehaviour that matches type T or is derived from T. Returns null if none are found.
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetBehaviours(System.Type)">
            <summary>
            Returns all AnimatorStateBehaviour that matches Type or is derived from Type
            </summary>
        </member>
        <member name="M:CometEngine.Animator.GetBehaviours``1">
            <summary>
            Returns all AnimatorStateBehaviour that matches type T or is derived from T
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.audioSample">
            <summary>
            The audio sample to play
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.outputAudioMixerGroup">
            <summary>
            The audio mixer group
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.isPlaying">
            <summary>
            Is the audio source playing the audio sample?
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.isPaused">
            <summary>
            Is the audio source paused when playing the audio sample?
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.isFinished">
            <summary>
            Has the audio sample finished playing?
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.loop">
            <summary>
            Should the audio sample loop when finished?
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.maxDistance">
            <summary>
            For 3D sounds, distance at which sound is inaudible
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.minDistance">
            <summary>
            For 3D sounds, distance where volume is at its maximum
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.mute">
            <summary>
            Should the audio sample be muted?
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.ignoreEffects">
            <summary>
            Ignore audio effect components from the audio source
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.ignoreListenerEffects">
            <summary>
            Ignore audio effect components from the audio listener
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.pan">
            <summary>
            The pan of the sound. Takes a value between -1 and 1, 0 is center
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.pitch">
            <summary>
            The playback speed (frequency) of the sound
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.playOnEnable">
            <summary>
            Should the audio sample be played when audio source is set enabled?
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.volume">
            <summary>
            Volume of the audio to play
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.mode">
            <summary>
            Play mode of the audio
            </summary>
        </member>
        <member name="P:CometEngine.AudioSource.timePosition">
            <summary>
            Get/Set the current time position in miliseconds of the sound
            </summary>
        </member>
        <member name="M:CometEngine.AudioSource.Play">
            <summary>
            Play the audio sample
            </summary>
        </member>
        <member name="M:CometEngine.AudioSource.Pause">
            <summary>
            Pause the audio sample
            </summary>
        </member>
        <member name="M:CometEngine.AudioSource.Resume">
            <summary>
            Resume the audio sample
            </summary>
        </member>
        <member name="M:CometEngine.AudioSource.Stop">
            <summary>
            Stop the audio sample
            </summary>
        </member>
        <member name="M:CometEngine.AudioSource.PlayOnce(CometEngine.AudioSample)">
            <summary>
            Play an audio sample applying the configuration of the audioSoruce
            </summary>
        </member>
        <member name="M:CometEngine.AudioSource.PlaySingle(CometEngine.AudioSample,System.Single)">
            <summary>
            Play a single audioSample 2D
            </summary>
        </member>
        <member name="M:CometEngine.AudioSource.PlaySingleAtPosition(CometEngine.AudioSample,CometEngine.Vector3,System.Single)">
            <summary>
            Play a single audioSample 3D
            </summary>
        </member>
        <member name="M:CometEngine.AudioSource.PlaySingleTracked(CometEngine.AudioSample,System.Single)">
            <summary>
            Play a single audioSample 2D and returns the AudioSource that is destroyed once the audio is finished
            </summary>
        </member>
        <member name="M:CometEngine.AudioSource.PlaySingleAtPositionTracked(CometEngine.AudioSample,CometEngine.Vector3,System.Single)">
            <summary>
            Play a single audioSample 3D and returns the AudioSource that is destroyed once the audio is finished
            </summary>
        </member>
        <member name="T:CometEngine.AudioEffect">
            <summary>
            Base class for every Audio Effect Component.
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectChorus.wetDryMix">
            <summary>
            Ratio of wet (processed) signal to dry (unprocessed) signal
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectChorus.depth">
            <summary>
            Percentage by which the delay time is modulated by the low-frequency oscillator, in hundredths of a percentage point
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectChorus.feedback">
            <summary>
            Percentage of output signal to feed back into the effect's input
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectChorus.frequency">
            <summary>
            Frequency of the LFO
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectChorus.delay">
            <summary>
            Number of milliseconds the input is delayed before it is played back
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectChorus.phase">
            <summary>
            Phase differential between left and right LFOs. Possible values: -180, -90, 0, 90, 180
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectChorus.sinusWaveForm">
            <summary>
            True for sinus wave form, false for triangle
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectCompressor.gain">
            <summary>
            Output gain of signal after Compressor
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectCompressor.ratio">
            <summary>
            Compressor ratio
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectCompressor.preDelay">
            <summary>
            Time after Threshold is reached before attack phase is started, in milliseconds
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectCompressor.attack">
            <summary>
            Time before Compressor reaches its full value
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectCompressor.release">
            <summary>
            Speed at which Compressor is stopped after input drops below Threshold
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectCompressor.threshold">
            <summary>
            Point at which Compressor begins, in decibels
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectDistortion.intensity">
            <summary>
            Percentage of distortion intensity
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectDistortion.gain">
            <summary>
            Amount of signal change after distortion
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectDistortion.centerFrequency">
            <summary>
            Center frequency of harmonic content addition
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectDistortion.bandWidth">
            <summary>
            Width of frequency band that determines range of harmonic content addition
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectDistortion.lowPassCutoff">
            <summary>
            Filter cutoff for high-frequency harmonics attenuation
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectEcho.delay">
            <summary>
            Delay of the echo sound in milliseconds
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectEcho.wetDryMix">
            <summary>
            Ratio of wet (processed) signal to dry (unprocessed) signal
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectEcho.feedback">
            <summary>
            Percentage of output fed back into input
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectEqualizer.bandWidth">
            <summary>
            Bandwidth, in semitones
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectEqualizer.centerFrequency">
            <summary>
            Center frequency, in hertz
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectFlanger.wetDryMix">
            <summary>
            Ratio of wet (processed) signal to dry (unprocessed) signal
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectFlanger.depth">
            <summary>
            Percentage by which the delay time is modulated by the low-frequency oscillator, in hundredths of a percentage point
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectFlanger.feedback">
            <summary>
            Percentage of output signal to feed back into the effect's input
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectFlanger.frequency">
            <summary>
            Frequency of the LFO
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectFlanger.delay">
            <summary>
            Number of milliseconds the input is delayed before it is played back
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectFlanger.phase">
            <summary>
            Phase differential between left and right LFOs. Possible values: -180, -90, 0, 90, 180
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectFlanger.triangleWaveForm">
            <summary>
            True for triangle wave form, false for square
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectGargle.rateHz">
            <summary>
            Rate of modulation, in Hertz
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectGargle.sinusWaveForm">
            <summary>
            True for sinus wave form, false for triangle
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectReverb.room">
            <summary>
            Attenuation of the room effect, in millibels (mB). Interval: [-10000, 0] Default: -1000 mB
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectReverb.roomHF">
            <summary>
            Attenuation of the room high-frequency effect. Interval: [-10000, 0] Default: 0 mB
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectReverb.roomRolloffFactor">
            <summary>
            Rolloff factor for the reflected signals. Interval: [0.0, 10.0] Default: 0.0
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectReverb.decayTime">
            <summary>
            Decay time, in seconds. Interval: [0.1, 20.0] Default: 1.49s
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectReverb.decayHFRatio">
            <summary>
            Ratio of the decay time at high frequencies to the decay time at low frequencies. Interval: [0.1, 2.0] Default: 0.83
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectReverb.reflectionsLevel">
            <summary>
            Attenuation of early reflections relative to Room. Interval: [-10000, 1000] Default: -2602 mB
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectReverb.reflectionsDelay">
            <summary>
            Delay time of the first reflection relative to the direct path in seconds. Interval: [0.0, 0.3] Default: 0.007 s
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectReverb.reverbLevel">
            <summary>
            Attenuation of late reverberation relative to Room, in mB. Interval: [-10000, 2000] Default: 200 mB
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectReverb.reverbDelay">
            <summary>
            Time limit between the early reflections and the late reverberation relative to the time of the first reflection. Interval: [0.0, 0.1] Default: 0.011 s
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectReverb.diffusion">
            <summary>
            Echo density in the late reverberation decay. Interval: [0.0, 1.0] Default: 1.0
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectReverb.density">
            <summary>
            Modal density in the late reverberation decay. Interval: [0.0, 1.0] Default: 1.0
            </summary>
        </member>
        <member name="P:CometEngine.AudioEffectReverb.referenceHF">
            <summary>
            Reference high frequency, in hertz. Interval: [20.0, 20000.0] Default: 5000.0 Hz
            </summary>
        </member>
        <member name="P:CometEngine.Camera.aspectRatio">
            <summary>
            Camera width / Camera height
            </summary>
        </member>
        <member name="P:CometEngine.Camera.backgroundColor">
            <summary>
            Background clear color
            </summary>
        </member>
        <member name="P:CometEngine.Camera.cullingMask">
            <summary>
            Mask to select which gameObjects renders
            </summary>
        </member>
        <member name="P:CometEngine.Camera.farPlane">
            <summary>
            The distance of the far clipping plane from the Camera
            </summary>
        </member>
        <member name="P:CometEngine.Camera.nearPlane">
            <summary>
            The distance of the near clipping plane from the the Camera
            </summary>
        </member>
        <member name="P:CometEngine.Camera.size">
            <summary>
            The size of the camera
            </summary>
        </member>
        <member name="P:CometEngine.Camera.depth">
            <summary>
            The depth of the camera to know which camera renders on top of the others
            </summary>
        </member>
        <member name="P:CometEngine.Camera.worldSize">
            <summary>
            The width and height of the camera in world space units
            </summary>
        </member>
        <member name="M:CometEngine.Camera.ScreenToWorldPoint(CometEngine.Vector2)">
            <summary>
            Transform a screen point to world space point
            </summary>
        </member>
        <member name="M:CometEngine.Camera.WorldToScreenPoint(CometEngine.Vector2)">
            <summary>
            Transform a world point to screen point
            </summary>
        </member>
        <member name="P:CometEngine.Camera.renderTexture">
            <summary>
            The texture where this camera renders to
            </summary>
        </member>
        <member name="P:CometEngine.Camera.allCameras">
            <summary>
            Array of all cameras
            </summary>
        </member>
        <member name="P:CometEngine.Camera.camerasCount">
            <summary>
            Number of cameras
            </summary>
        </member>
        <member name="P:CometEngine.BaseLight.color">
            <summary>
            The color of the light
            </summary>
        </member>
        <member name="P:CometEngine.BaseLight.intensity">
            <summary>
            The Intensity of a light is multiplied with the Light color
            </summary>
        </member>
        <member name="P:CometEngine.BaseLight.sortingLayers">
            <summary>
            Array of all sorting layers this light affects
            </summary>
        </member>
        <member name="P:CometEngine.SpriteLight.sprite">
            <summary>
            The sprite to render as a light
            </summary>
        </member>
        <member name="P:CometEngine.BoxCollider.size">
            <summary>
            The size of the box collider
            </summary>
        </member>
        <member name="P:CometEngine.CapsuleCollider.direction">
            <summary>
            The direction of the capsule collider
            </summary>
        </member>
        <member name="P:CometEngine.CapsuleCollider.size">
            <summary>
            The size of the capsule collider
            </summary>
        </member>
        <member name="P:CometEngine.CircleCollider.radius">
            <summary>
            The radius of the circle
            </summary>
        </member>
        <member name="P:CometEngine.Collider.bounciness">
            <summary>
            Surface bounciness
            </summary>
        </member>
        <member name="P:CometEngine.Collider.friction">
            <summary>
            Surface friction
            </summary>
        </member>
        <member name="P:CometEngine.Collider.isTrigger">
            <summary>
            Wether or not this collider is a trigger
            </summary>
        </member>
        <member name="P:CometEngine.Collider.usedByEffector">
            <summary>
            Wether or not this collider is used by an effector
            </summary>
        </member>
        <member name="P:CometEngine.Collider.density">
            <summary>
            Density of the collider
            </summary>
        </member>
        <member name="P:CometEngine.Collider.worldRect">
            <summary>
            The world rect of the bounds of the collider
            </summary>
        </member>
        <member name="P:CometEngine.Collider.sharedMaterial">
            <summary>
            The shared material 
            </summary>
        </member>
        <member name="P:CometEngine.Collider.material">
            <summary>
            A new material clonned form the original. It must be destroyed when the game object is destroyed calling PhysicMaterial.Remove()
            </summary>
        </member>
        <member name="P:CometEngine.Collider.offset">
            <summary>
            Collider position offset
            </summary>
        </member>
        <member name="M:CometEngine.Collider.ClosestPoint(CometEngine.Vector2)">
            <summary>
            Returns the closest point for this collider
            </summary>
        </member>
        <member name="M:CometEngine.Collider.Distance(CometEngine.Collider)">
            <summary>
            The minimum distance of collider against this collider
            </summary>
        </member>
        <member name="M:CometEngine.Collider.GetContactPoints">
            <summary>
            Returns an array of all contact points
            </summary>
        </member>
        <member name="M:CometEngine.Collider.IsTouching(CometEngine.Collider)">
            <summary>
            Returns true if the collider is touching this collider
            </summary>
        </member>
        <member name="M:CometEngine.Collider.IsTouchingAny">
            <summary>
            Returns true if this collider is touching any collider
            </summary>
        </member>
        <member name="M:CometEngine.Collider.IsTouchingLayers(CometEngine.LayerMask)">
            <summary>
            Returns true if this collider is touching any collider having that mask
            </summary>
        </member>
        <member name="M:CometEngine.Collider.GetOverlappedColliders">
            <summary>
            Returns an array of all colliders that overlap with this collider
            </summary>
        </member>
        <member name="M:CometEngine.Collider.TestPoint(CometEngine.Vector2)">
            <summary>
            Return true if the point is contained by this collider
            </summary>
        </member>
        <member name="M:CometEngine.Collider.RayCast(CometEngine.Vector2,System.Int32,System.Single)">
            <summary>
            This collider is cast into every collider ignoring itself
            </summary>
        </member>
        <member name="M:CometEngine.Collider.RayCastSingle(CometEngine.RaycastHit@,CometEngine.Vector2,System.Int32,System.Single)">
            <summary>
            This collider is cast into every collider ignoring itself and return true if hits any and an out RayCastHit with the closest
            </summary>
        </member>
        <member name="P:CometEngine.EdgeCollider.verticesCount">
            <summary>
            The number of vertices
            </summary>
        </member>
        <member name="P:CometEngine.EdgeCollider.vertices">
            <summary>
            Array of vertices
            </summary>
        </member>
        <member name="P:CometEngine.PackerCollider.creationMode">
            <summary>
            Creation Mode of the collider
            </summary>
        </member>
        <member name="M:CometEngine.PackerCollider.GenerateShapes">
            <summary>
            Generates/Refreshes the shapes
            </summary>
        </member>
        <member name="P:CometEngine.PolygonCollider.verticesCount">
            <summary>
            The number of vertices
            </summary>
        </member>
        <member name="P:CometEngine.PolygonCollider.vertices">
            <summary>
            Array of vertices
            </summary>
        </member>
        <member name="P:CometEngine.AreaEffector.useGlobalAngle">
            <summary>
            Should the forceAngle use global space
            </summary>
        </member>
        <member name="P:CometEngine.AreaEffector.affectTriggers">
            <summary>
            Should the area effector affect triggers
            </summary>
        </member>
        <member name="P:CometEngine.AreaEffector.forceAngle">
            <summary>
            The angle of the force to be applied
            </summary>
        </member>
        <member name="P:CometEngine.AreaEffector.forceMagnitud">
            <summary>
            The magnitude of the force to be applied
            </summary>
        </member>
        <member name="P:CometEngine.AreaEffector.forceVariation">
            <summary>
            The variation of the magnitude of the force to be applied
            </summary>
        </member>
        <member name="P:CometEngine.AreaEffector.forceTarget">
            <summary>
            The target where force is applied
            </summary>
        </member>
        <member name="P:CometEngine.Effector.useColliderMask">
            <summary>
            Whether or not to use a personalized collider mask
            </summary>
        </member>
        <member name="P:CometEngine.Effector.mask">
            <summary>
            The mask to filter
            </summary>
        </member>
        <member name="P:CometEngine.PlatformEffector.rotationOffset">
            <summary>
            Rotation Offset
            </summary>
        </member>
        <member name="P:CometEngine.PlatformEffector.surfaceArc">
            <summary>
            The angle of the arc
            </summary>
        </member>
        <member name="P:CometEngine.PointEffector.forceMagnitud">
            <summary>
            The magnitude of the force to be applied
            </summary>
        </member>
        <member name="P:CometEngine.PointEffector.forceVariation">
            <summary>
            The variation of the magnitude of the force to be applied
            </summary>
        </member>
        <member name="P:CometEngine.PointEffector.affectTriggers">
            <summary>
            Should the point effector affect triggers
            </summary>
        </member>
        <member name="P:CometEngine.PointEffector.forceSource">
            <summary>
            The source which is used to calculate the centroid point of the effector. The distance from the target is defined from this point
            </summary>
        </member>
        <member name="P:CometEngine.PointEffector.forceTarget">
            <summary>
            The target for where the effector applies any force
            </summary>
        </member>
        <member name="P:CometEngine.SurfaceEffector.speed">
            <summary>
            The speed to be maintained along the surface
            </summary>
        </member>
        <member name="P:CometEngine.SurfaceEffector.speedVariation">
            <summary>
            The speed variation (from zero to the variation) added to base speed to be applied
            </summary>
        </member>
        <member name="P:CometEngine.SurfaceEffector.forceScale">
            <summary>
            The scale of the impulse force applied while attempting to reach the surface
            </summary>
        </member>
        <member name="P:CometEngine.SurfaceEffector.useContactForce">
            <summary>
            Should the impulse force be applied to the contact point?
            </summary>
        </member>
        <member name="P:CometEngine.SurfaceEffector.useFriction">
            <summary>
            Should frction be used?
            </summary>
        </member>
        <member name="P:CometEngine.SurfaceEffector.useBounce">
            <summary>
            Should bounce be used?
            </summary>
        </member>
        <member name="P:CometEngine.AnchoredJoint.anchor">
            <summary>
            The anchor of the object that has the joint component
            </summary>
        </member>
        <member name="P:CometEngine.AnchoredJoint.connectedAnchor">
            <summary>
            The anchor of the connected object
            </summary>
        </member>
        <member name="P:CometEngine.AnchoredJoint.autoConfigureConnectedAnchor">
            <summary>
            Should the connectedAnchor be calculated automatically?
            </summary>
        </member>
        <member name="P:CometEngine.DistanceJoint.autoConfigureDistance">
            <summary>
            Should the distance be calculated automatically?
            </summary>
        </member>
        <member name="P:CometEngine.DistanceJoint.distance">
            <summary>
            The distance separating the two ends of the joint
            </summary>
        </member>
        <member name="P:CometEngine.DistanceJoint.maxDistanceFixed">
            <summary>
            Should the minimum distance be the max distance?
            </summary>
        </member>
        <member name="P:CometEngine.FixedJoint.dampingRatio">
            <summary>
            The amount by which the spring force is reduced in proportion to the movement speed
            </summary>
        </member>
        <member name="P:CometEngine.FixedJoint.frequency">
            <summary>
            The frequency at which the spring oscillates around the distance between the objects
            </summary>
        </member>
        <member name="P:CometEngine.FixedJoint.referenceAngle">
            <summary>
            The angle referenced between the two bodies used as the constraint for the joint
            </summary>
        </member>
        <member name="P:CometEngine.FrictionJoint.maxForce">
            <summary>
            The maximum force that can be generated when trying to maintain the friction joint constraint
            </summary>
        </member>
        <member name="P:CometEngine.FrictionJoint.maxTorque">
            <summary>
            The maximum torque that can be generated when trying to maintain the friction joint constraint
            </summary>
        </member>
        <member name="P:CometEngine.HingeJoint.referenceAngle">
            <summary>
            The angle referenced between the two bodies used as the constraint for the joint
            </summary>
        </member>
        <member name="P:CometEngine.HingeJoint.jointAngle">
            <summary>
             The current joint angle in degrees
            </summary>
        </member>
        <member name="P:CometEngine.HingeJoint.jointSpeed">
            <summary>
             The current joint linear speed
            </summary>
        </member>
        <member name="P:CometEngine.HingeJoint.useMotor">
            <summary>
            Should a motor force be applied automatically to the RigidBody?
            </summary>
        </member>
        <member name="P:CometEngine.HingeJoint.motorSpeed">
            <summary>
            The desired speed for the RigidBody to reach as it moves with the joint
            </summary>
        </member>
        <member name="P:CometEngine.HingeJoint.maxMotorForce">
            <summary>
            The maximum force that can be applied to the RigidBody at the joint to attain the target speed
            </summary>
        </member>
        <member name="P:CometEngine.HingeJoint.useLimits">
            <summary>
            Should motion limits be used?
            </summary>
        </member>
        <member name="P:CometEngine.HingeJoint.limitLowerAngle">
            <summary>
            Minimum distance the RigidBody can move from the joint's anchor
            </summary>
        </member>
        <member name="P:CometEngine.HingeJoint.limitUpperAngle">
            <summary>
            Maximum distance the RigidBody can move from the joint's anchor
            </summary>
        </member>
        <member name="P:CometEngine.Joint.attachedRigidBody">
            <summary>
            The rigidBody this joint is attached to
            </summary>
        </member>
        <member name="P:CometEngine.Joint.connectedRigidBody">
            <summary>
            The rigidBody this joint is connected to
            </summary>
        </member>
        <member name="P:CometEngine.Joint.collisionActive">
            <summary>
            Should the two rigidBodies collide?
            </summary>
        </member>
        <member name="P:CometEngine.Joint.breakForce">
            <summary>
            The force magnitud needed to break the joint
            </summary>
        </member>
        <member name="P:CometEngine.Joint.breakTorque">
            <summary>
            The torque needed to break the joint
            </summary>
        </member>
        <member name="P:CometEngine.Joint.reactionForce">
            <summary>
            Get the reaction force of the joint
            </summary>
        </member>
        <member name="P:CometEngine.Joint.reactionTorque">
            <summary>
            Get the reaction torque of the joint
            </summary>
        </member>
        <member name="M:CometEngine.Joint.GetReactionForce(System.Single)">
            <summary>
            Get the reaction force of the joint in the specified timeStep
            </summary>
        </member>
        <member name="M:CometEngine.Joint.GetReactionTorque(System.Single)">
            <summary>
            Get the reaction torque of the joint in the specified timeStep
            </summary>
        </member>
        <member name="P:CometEngine.RelativeJoint.angularOffset">
            <summary>
            The current angular offset between the Rigidbody2D that the joint connects
            </summary>
        </member>
        <member name="P:CometEngine.RelativeJoint.autoConfigureOffset">
            <summary>
            Should both the linearOffset and angularOffset be calculated automatically?
            </summary>
        </member>
        <member name="P:CometEngine.RelativeJoint.correctionScale">
            <summary>
            Scales both the linear and angular forces used to correct the required relative orientation
            </summary>
        </member>
        <member name="P:CometEngine.RelativeJoint.maxForce">
            <summary>
            The maximum force that can be generated when trying to maintain the relative joint constraint
            </summary>
        </member>
        <member name="P:CometEngine.RelativeJoint.maxTorque">
            <summary>
            The maximum torque that can be generated when trying to maintain the relative joint constraint
            </summary>
        </member>
        <member name="P:CometEngine.RelativeJoint.linearOffset">
            <summary>
            The current linear offset between the RigidBody that the joint connects
            </summary>
        </member>
        <member name="P:CometEngine.SliderJoint.autoConfigureAngle">
            <summary>
            Should the angle be calculated automatically?
            </summary>
        </member>
        <member name="P:CometEngine.SliderJoint.angle">
            <summary>
            The angle of the line in space (in degrees)
            </summary>
        </member>
        <member name="P:CometEngine.SliderJoint.useMotor">
            <summary>
            Should a motor force be applied automatically to the RigidBody?
            </summary>
        </member>
        <member name="P:CometEngine.SliderJoint.useLimits">
            <summary>
            Should motion limits be used?
            </summary>
        </member>
        <member name="P:CometEngine.SliderJoint.referenceAngle">
            <summary>
            The angle referenced between the two bodies used as the constraint for the joint
            </summary>
        </member>
        <member name="P:CometEngine.SliderJoint.jointTranslation">
            <summary>
             The current joint translation
            </summary>
        </member>
        <member name="P:CometEngine.SliderJoint.jointSpeed">
            <summary>
             The current joint speed
            </summary>
        </member>
        <member name="P:CometEngine.SliderJoint.motorSpeed">
            <summary>
            The desired speed for the RigidBody to reach as it moves with the joint
            </summary>
        </member>
        <member name="P:CometEngine.SliderJoint.maxMotorForce">
            <summary>
            The maximum force that can be applied to the RigidBody at the joint to attain the target speed
            </summary>
        </member>
        <member name="P:CometEngine.SliderJoint.limitLowerTranslation">
            <summary>
            Minimum distance the RigidBody can move from the joint's anchor
            </summary>
        </member>
        <member name="P:CometEngine.SliderJoint.limitUpperTranslation">
            <summary>
            Maximum distance the RigidBody can move from the joint's anchor
            </summary>
        </member>
        <member name="P:CometEngine.SpringJoint.autoConfigureDistance">
            <summary>
            Should the distance be calculated automatically?
            </summary>
        </member>
        <member name="P:CometEngine.SpringJoint.distance">
            <summary>
            The distance separating the two ends of the joint
            </summary>
        </member>
        <member name="P:CometEngine.SpringJoint.dampingRatio">
            <summary>
            The amount by which the spring force is reduced in proportion to the movement speed
            </summary>
        </member>
        <member name="P:CometEngine.SpringJoint.frequency">
            <summary>
            The frequency at which the spring oscillates around the distance between the objects
            </summary>
        </member>
        <member name="P:CometEngine.TargetJoint.anchor">
            <summary>
            The anchor of the object that has the joint component
            </summary>
        </member>
        <member name="P:CometEngine.TargetJoint.target">
            <summary>
            The world-space position that the joint will attempt to move the body to
            </summary>
        </member>
        <member name="P:CometEngine.TargetJoint.autoConfigureTarget">
            <summary>
            Should the target be calculated automatically?
            </summary>
        </member>
        <member name="P:CometEngine.TargetJoint.dampingRatio">
            <summary>
            The amount by which the spring force is reduced in proportion to the movement speed
            </summary>
        </member>
        <member name="P:CometEngine.TargetJoint.frequency">
            <summary>
            The frequency at which the spring oscillates around the distance between the objects
            </summary>
        </member>
        <member name="P:CometEngine.TargetJoint.maxForce">
            <summary>
            The maximum force that can be generated when trying to maintain the target joint constraint
            </summary>
        </member>
        <member name="P:CometEngine.WheelJoint.useMotor">
            <summary>
            Should a motor force be applied automatically to the RigidBody?
            </summary>
        </member>
        <member name="P:CometEngine.WheelJoint.motorSpeed">
            <summary>
            The desired speed for the RigidBody to reach as it moves with the joint
            </summary>
        </member>
        <member name="P:CometEngine.WheelJoint.maxMotorForce">
            <summary>
            The maximum force that can be applied to the RigidBody at the joint to attain the target speed
            </summary>
        </member>
        <member name="P:CometEngine.WheelJoint.jointAngle">
            <summary>
             The current joint angle in degrees
            </summary>
        </member>
        <member name="P:CometEngine.WheelJoint.jointTranslation">
            <summary>
             The current joint translation
            </summary>
        </member>
        <member name="P:CometEngine.WheelJoint.jointLinearSpeed">
            <summary>
             The current joint linear speed
            </summary>
        </member>
        <member name="P:CometEngine.WheelJoint.jointAngularSpeed">
            <summary>
             The current joint angular speed
            </summary>
        </member>
        <member name="P:CometEngine.WheelJoint.suspensionAngle">
            <summary>
            The world angle (in degrees) along which the suspension will move
            </summary>
        </member>
        <member name="P:CometEngine.WheelJoint.suspensionDampingRatio">
            <summary>
            The amount by which the suspension spring force is reduced in proportion to the movement speed
            </summary>
        </member>
        <member name="P:CometEngine.WheelJoint.suspensionFrequency">
            <summary>
            The frequency at which the suspension spring oscillates
            </summary>
        </member>
        <member name="M:CometEngine.WheelJoint.GetMotorTorque(System.Single)">
            <summary>
            Gets the motor torque of the joint given the specified timestep
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.angularDrag">
            <summary>
            Coefficient of angular drag
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.angularVelocity">
            <summary>
            Angular velocity in degrees per second
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.attachedColliderCount">
            <summary>
            Number of colliders attached to the RigidBody
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.bodyType">
            <summary>
            The type of the body
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.localCenterOfMass">
            <summary>
            The RigidBody center of mass in local space
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.worldCenterOfMass">
            <summary>
            The RigidBody center of mass in world space
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.collisionDetection">
            <summary>
            The method used by the physics engine to check if two objects have collided
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.linearDrag">
            <summary>
            Coefficient of linear drag
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.freezeRotation">
            <summary>
            Should physics change the rotation of the object?
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.freezePositionX">
            <summary>
            Should physics change the position X of the object?
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.freezePositionY">
            <summary>
            Should physics change the position Y of the object?
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.gravityScale">
            <summary>
             The scale to which this object is affected by gravity
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.inertia">
            <summary>
             The RigidBody rotational inertia
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.mass">
            <summary>
             The RigidBody mass
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.position">
            <summary>
             The RigidBody position
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.rotation">
            <summary>
             The RigidBody rotation in degrees
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.sharedMaterial">
            <summary>
            The RigidBody material applied to attached colliders
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.material">
            <summary>
            A new material clonned form the original. It must be destroyed when the game object is destroyed calling PhysicMaterial.Remove()
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.simulated">
            <summary>
             Does this RigidBody exists in the simulation of the physics system?
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.autoMass">
            <summary>
             Should the mass be automatically calculaed with he density of attached colliders?
            </summary>
        </member>
        <member name="P:CometEngine.RigidBody.velocity">
            <summary>
            The RigidBody velocity
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.ApplyAngularImpulse(System.Single)">
            <summary>
            Apply an angular impulse
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.ApplyForceAtPoint(CometEngine.Vector2,CometEngine.Vector2)">
            <summary>
            Apply a force at a world point. If the force is not applied at the center of mass, it will generate a torque and affect the angular velocity
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.ApplyForce(CometEngine.Vector2)">
            <summary>
            Apply a force to the center of mass
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.ApplyLinearImpulseAtPoint(CometEngine.Vector2,CometEngine.Vector2)">
            <summary>
            Apply an impulse at a point.This immediately modifies the velocity. It also modifies the angular velocity if the point of application is not at the center of mass.
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.ApplyLinearImpulse(CometEngine.Vector2)">
            <summary>
            Apply an impulse to the center of mass. This immediately modifies the velocity
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.ApplyTorque(System.Single)">
            <summary>
            Apply a torque. This affects the angular velocity without affecting the linear velocity of the center of mass
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.TestPoint(CometEngine.Vector2)">
            <summary>
            Return true if the point is contained for any of the attached colliders
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.Sleep">
            <summary>
            Enables the sleep state of the body
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.WakeUp">
            <summary>
            Disables the sleep state of the body
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.IsSleeping">
            <summary>
            Returns true if the body is sleeping
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.IsAwake">
            <summary>
            Returns true if the body is awake
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.GetOverlappedColliders">
            <summary>
            Returns an array of all colliders that overlap with the attached colliders of the body
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.IsTouching(CometEngine.Collider)">
            <summary>
            Returns true if the collider is touching any of the attached colliders of the body
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.IsTouchingLayers(CometEngine.LayerMask)">
            <summary>
            Returns true if any of the attached colliders is touching any collider having that mask
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.IsTouchingAny">
            <summary>
            Returns true if any of the attached colliders is touching any collider
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.GetWorldVector(CometEngine.Vector2)">
            <summary>
            Transforms a local space vector to world space
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.GetLocalVector(CometEngine.Vector2)">
            <summary>
            Transforms a world space vector to local space
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.GetWorldPoint(CometEngine.Vector2)">
            <summary>
            Transforms a local space point to world space
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.GetLocalPoint(CometEngine.Vector2)">
            <summary>
            Transforms a world space point to local space
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.GetVelocityFromLocalPoint(CometEngine.Vector2)">
            <summary>
            Returns the velocity at local space point
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.GetVelocityFromWorldPoint(CometEngine.Vector2)">
            <summary>
            Returns the velocity at world space point
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.GetAttachedColliders">
            <summary>
            Returns an array of all attached colliders
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.Distance(CometEngine.Collider)">
            <summary>
            The minimum distance of collider against all colliders attached to this body
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.ClosestPoint(CometEngine.Vector2)">
            <summary>
            Returns the closest point of attached colliders
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.GetContactPoints">
            <summary>
            Returns an array of all contact points
            </summary>
        </member>
        <member name="M:CometEngine.RigidBody.Cast(CometEngine.Vector2,System.Int32,System.Single)">
            <summary>
            All attached colliders to this rigidBody are cast into every collider ignoring the Colliders attached to this rigidBody
            </summary>
        </member>
        <member name="P:CometEngine.BaseRenderer.color">
            <summary>
            The color of the sprite
            </summary>
        </member>
        <member name="P:CometEngine.BaseRenderer.flipX">
            <summary>
            Flip sprite on x axis
            </summary>
        </member>
        <member name="P:CometEngine.BaseRenderer.flipY">
            <summary>
            Flip sprite on x axis
            </summary>
        </member>
        <member name="P:CometEngine.BaseRenderer.sortPoint">
            <summary>
            Position to determine the sorting of the sprite renderer 
            </summary>
        </member>
        <member name="P:CometEngine.Renderer.sortingLayerName">
            <summary>
            The name of the sorting layer
            </summary>
        </member>
        <member name="P:CometEngine.Renderer.sortingLayerIndex">
            <summary>
            The index of the sorting layer
            </summary>
        </member>
        <member name="P:CometEngine.Renderer.isVisible">
            <summary>
            Whether or not the renderer is visible
            </summary>
        </member>
        <member name="P:CometEngine.Renderer.sortingLayerOrder">
            <summary>
            The order of the sorting layer
            </summary>
        </member>
        <member name="P:CometEngine.Renderer.sharedMaterial">
            <summary>
            The asset material 
            </summary>
        </member>
        <member name="P:CometEngine.Renderer.material">
            <summary>
            A new material clonned form the original. It must be destroyed when the game object is destroyed calling Material.Clear()
            </summary>
        </member>
        <member name="P:CometEngine.RenderTextureRenderer.renderTexture">
            <summary>
            The texture to render
            </summary>
        </member>
        <member name="P:CometEngine.SpriteRenderer.sprite">
            <summary>
            The sprite to render
            </summary>
        </member>
        <member name="P:CometEngine.Transform.position">
            <summary>
            The world cordinates of this transform
            </summary>
        </member>
        <member name="P:CometEngine.Transform.eulerAngles">
            <summary>
            The world rotation in euler angles in degrees
            </summary>
        </member>
        <member name="P:CometEngine.Transform.right">
            <summary>
            The red axis
            </summary>
        </member>
        <member name="P:CometEngine.Transform.forward">
            <summary>
            The blue axis
            </summary>
        </member>
        <member name="P:CometEngine.Transform.up">
            <summary>
            The green axis
            </summary>
        </member>
        <member name="P:CometEngine.Transform.localEulerAngles">
            <summary>
            The rotation in euler angles in degrees relative to the parent
            </summary>
        </member>
        <member name="P:CometEngine.Transform.localPosition">
            <summary>
            The position relative to the parent
            </summary>
        </member>
        <member name="P:CometEngine.Transform.localScale">
            <summary>
            The scale relative to the parent
            </summary>
        </member>
        <member name="P:CometEngine.Transform.localRotation">
            <summary>
            The rotation relative to the parent
            </summary>
        </member>
        <member name="P:CometEngine.Transform.rotation">
            <summary>
            The world rotation of the transform
            </summary>
        </member>
        <member name="P:CometEngine.Transform.scale">
            <summary>
            The world scale of the transform
            </summary>
        </member>
        <member name="M:CometEngine.Transform.Rotate(CometEngine.Vector3,System.Single,CometEngine.Space)">
            <summary>
            Rotate the transform given and angle and axis
            </summary>
        </member>
        <member name="M:CometEngine.Transform.Rotate(CometEngine.Vector3,CometEngine.Space)">
            <summary>
            Rotate the transform in euler angles in degrees
            </summary>
        </member>
        <member name="M:CometEngine.Transform.Rotate(System.Single,System.Single,System.Single,CometEngine.Space)">
            <summary>
            Rotate the transform in euler angles in degrees
            </summary>
        </member>
        <member name="M:CometEngine.Transform.Translate(CometEngine.Vector3,CometEngine.Space)">
            <summary>
            Moves the transform in the direction and distance of translation 
            </summary>
        </member>
        <member name="M:CometEngine.Transform.SetPositionAndRotation(CometEngine.Vector3,CometEngine.Quaternion,CometEngine.Space)">
            <summary>
            Set the position and rotation
            </summary>
        </member>
        <member name="T:CometEngine.Coroutine">
            <summary>
            Class to reference a Coroutine
            </summary>
        </member>
        <member name="T:CometEngine.CustomYieldInstruction">
            <summary>
            Base class for all user custom yield instructions
            </summary>
        </member>
        <member name="M:CometEngine.CustomYieldInstruction.CanContinue">
            <summary>
            Return true in order to continue with the coroutine, false to keep the coroutine paused
            </summary>
        </member>
        <member name="T:CometEngine.WaitForSeconds">
            <summary>
            Suspends a coroutine for seconds that are affected for time scale
            </summary>
        </member>
        <member name="T:CometEngine.WaitForUnscaledSeconds">
            <summary>
            Suspends a coroutine for seconds that are not affected for time scale
            </summary>
        </member>
        <member name="T:CometEngine.YieldInstruction">
            <summary>
            Base class for all yield instructions
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.#ctor">
            <summary>
            Create a new GameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.#ctor(System.String)">
            <summary>
            Create a new GameObject with name
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.#ctor(System.String,System.Type[])">
            <summary>
            Create a new GameObject with name and components
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.#ctor(System.Type[])">
            <summary>
            Create a new GameObject with components
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.#ctor(CometEngine.GameObject)">
            <summary>
            Create a new GameObject with a parent
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.#ctor(System.String,CometEngine.GameObject)">
            <summary>
            Create a new GameObject with name and a parent
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.#ctor(System.String,CometEngine.GameObject,System.Type[])">
            <summary>
            Create a new GameObject with name, parent and components
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.#ctor(CometEngine.GameObject,System.Type[])">
            <summary>
            Create a new GameObject with parent and components
            </summary>
        </member>
        <member name="P:CometEngine.GameObject.tag">
            <summary>
            The tag of this GameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.CompareTag(System.String)">
            <summary>
            Returns true if it is the same tag
            </summary>
        </member>
        <member name="P:CometEngine.GameObject.transform">
            <summary>
            The transform attached to this GameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.Find(System.String)">
            <summary>
            Return the first GameObject with that name. Return null if no GameObject is found.
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.FindOnlyEnabled(System.String)">
            <summary>
            Return the first GameObject enabled with that name. Return null if no GameObject is found.
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.FindWithTag(System.String)">
            <summary>
            Return the first GameObject with that tag. Return null if no GameObject is found.
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.FindGameObjectsWithTag(System.String)">
            <summary>
            Return an array of GameObjects tagged tag, or empty array if no one is found.
            </summary>
        </member>
        <member name="P:CometEngine.GameObject.layer">
            <summary>
            The number of layer this gameObject is in
            </summary>
        </member>
        <member name="P:CometEngine.GameObject.isStatic">
            <summary>
            Returns true if the gameObject is static
            </summary>
        </member>
        <member name="P:CometEngine.GameObject.scene">
            <summary>
            Return the Scene where the gameObject is in
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.AddComponent(System.Type)">
            <summary>
            Add a new component to the gameObject and returns it
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.AddComponent``1">
            <summary>
            Add a new component to the gameObject and returns it
            </summary>
        </member>
        <member name="P:CometEngine.GameObject.enabled">
            <summary>
            The local state of the GameObject
            </summary>
        </member>
        <member name="P:CometEngine.GameObject.enabledInScene">
            <summary>
            The global state of the GameObject, if the object is enabled but a parent is disabled, then this will return false
            </summary>
        </member>
        <member name="P:CometEngine.GameObject.root">
            <summary>
            Return the root of this gameObject
            </summary>
        </member>
        <member name="P:CometEngine.GameObject.parent">
            <summary>
            Return the parent of this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SetParentInstantly(CometEngine.GameObject)">
            <summary>
            Set a new parent instantly, it is recommended to use SetParent
            </summary>
        </member>
        <member name="P:CometEngine.GameObject.childrenSize">
            <summary>
            Returns the number of children
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.GetComponent(System.Type)">
            <summary>
            Returns the component or null if it does not exist
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.GetComponent``1">
            <summary>
            Returns the component or null if it does not exist
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.GetComponents(System.Type)">
            <summary>
            Returns an array of components found
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.GetComponents``1">
            <summary>
            Returns an array of components found
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.GetComponentInParent(System.Type)">
            <summary>
            Return the component or null if it does not exist
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.GetComponentInParent``1">
            <summary>
            Return the component or null if it does not exist
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.GetComponentsInParent(System.Type)">
            <summary>
            Returns an array of components found
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.GetComponentsInParent``1">
            <summary>
            Returns an array of components found
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.GetComponentInChildren(System.Type)">
            <summary>
            Return the component or null if it does not exist
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.GetComponentInChildren``1">
            <summary>
            Return the component or null if it does not exist
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.GetComponentsInChildren(System.Type)">
            <summary>
            Returns an array of components found
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.GetComponentsInChildren``1">
            <summary>
            Returns an array of components found
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.TryGetComponent(System.Type,CometEngine.Component@)">
            <summary>
            Return true if the component exists
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.TryGetComponent``1(``0@)">
            <summary>
            Return true if the component exists
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SendMessage(System.String)">
            <summary>
            Calls the methodName in every CometBehaviour in this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SendMessage(System.String,System.Object,System.Boolean)">
            <summary>
            Calls the methodName in every CometBehaviour in this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SendMessage(System.String,System.Object)">
            <summary>
            Calls the methodName in every CometBehaviour in this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SendMessage(System.String,System.Boolean)">
            <summary>
            Calls the methodName in every CometBehaviour in this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SendMessageDownwards(System.String)">
            <summary>
            Calls the methodName in every CometBehaviour downwards this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SendMessageDownwards(System.String,System.Object,System.Boolean)">
            <summary>
            Calls the methodName in every CometBehaviour downwards this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SendMessageDownwards(System.String,System.Object)">
            <summary>
            Calls the methodName in every CometBehaviour downwards this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SendMessageDownwards(System.String,System.Boolean)">
            <summary>
            Calls the methodName in every CometBehaviour downwards this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SendMessageUpwards(System.String)">
            <summary>
            Calls the methodName in every CometBehaviour upwards this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SendMessageUpwards(System.String,System.Object,System.Boolean)">
            <summary>
            Calls the methodName in every CometBehaviour upwards this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SendMessageUpwards(System.String,System.Object)">
            <summary>
            Calls the methodName in every CometBehaviour upwards this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SendMessageUpwards(System.String,System.Boolean)">
            <summary>
            Calls the methodName in every CometBehaviour upwards this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.IsChildOf(CometEngine.GameObject)">
            <summary>
            Returns true if is parent or grandparent
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.DetachChildren">
            <summary>
            Unparents all children 
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.DetachChildrenInstantly">
            <summary>
            Unparents all children instantly, it is recommended to use DetachChildren
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.Detach">
            <summary>
            Unparents this gameObject
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.DetachInstantly">
            <summary>
            Unparents this gameObject instantly, it is recommended to use Detach
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.GetChild(System.Int32)">
            <summary>
            Return the child with index index or null if it doesn't exist
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.MakeImmutable">
            <summary>
            Move the gameObject to a scene that is never destroyed
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.MakeMutable">
            <summary>
            If the gameObject is in the immutable scene, move it to the active one
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.GetChild(System.String)">
            <summary>
            Return the child named name or null if it doesn't exist
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.GetChildRecursive(System.String)">
            <summary>
            Return recursivly the child named name or null if it doesn't exist
            </summary>
        </member>
        <member name="P:CometEngine.GameObject.siblingIndex">
            <summary>
            The index of child 
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SetAsFirstSibling">
            <summary>
            Set the gameObject to be the first sibling
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SetAsFirstSiblingInstantly">
            <summary>
            Set the gameObject to be the first sibling intantly, it is recommended to use SetAsFirstSibling
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SetSiblingIndex(System.Int32)">
            <summary>
            Set the gameObject siblingIndex
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SetSiblingIndexInstantly(System.Int32)">
            <summary>
            Set the gameObject siblingIndex, it is recommended to use SetSiblingIndex
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SetAsLastSibling">
            <summary>
            Set the gameObject to be the last sibling
            </summary>
        </member>
        <member name="M:CometEngine.GameObject.SetAsLastSiblingInstantly">
            <summary>
            Set the gameObject to be the last sibling intantly, it is recommended to use SetAsLastSibling
            </summary>
        </member>
        <member name="T:CometEngine.Object">
            <summary>
            Base class for all objects that Comet can reference.
            </summary>
        </member>
        <member name="P:CometEngine.Object.name">
            <summary>
            Name of the object
            </summary>
        </member>
        <member name="P:CometEngine.Object.instanceID">
            <summary>
            Unique object identifier
            </summary>
        </member>
        <member name="M:CometEngine.Object.ToString">
            <summary>
            Name of the object
            </summary>
        </member>
        <member name="M:CometEngine.Object.Instantiate(CometEngine.GameObject)">
            <summary>
            Returns a clone of another object
            </summary>
        </member>
        <member name="M:CometEngine.Object.Instantiate(CometEngine.GameObject,CometEngine.GameObject)">
            <summary>
            Returns a clone of another object and with a parent parent
            </summary>
        </member>
        <member name="M:CometEngine.Object.Instantiate(CometEngine.GameObject,CometEngine.Vector3,CometEngine.Quaternion)">
            <summary>
            Returns a clone of another object setting its position and rotation
            </summary>
        </member>
        <member name="M:CometEngine.Object.Instantiate(CometEngine.GameObject,CometEngine.Vector3,CometEngine.Quaternion,CometEngine.GameObject,CometEngine.Space)">
            <summary>
            Returns a clone of another object setting its parent, and position and rotation in world space or local space
            </summary>
        </member>
        <member name="M:CometEngine.Object.Destroy(CometEngine.Object)">
            <summary>
            Destroy the object at the begining of the next frame
            </summary>
        </member>
        <member name="M:CometEngine.Object.Destroy(CometEngine.Object,System.Single)">
            <summary>
            Destroy the object after seconds
            </summary>
        </member>
        <member name="P:CometEngine.Animation.length">
            <summary>
            Duration in seconds
            </summary>
        </member>
        <member name="P:CometEngine.Animation.samples">
            <summary>
            Frame rate
            </summary>
        </member>
        <member name="P:CometEngine.Animation.loop">
            <summary>
            Should animation loop?
            </summary>
        </member>
        <member name="M:CometEngine.AnimatorControllerBase.GetAllAnimations">
            <summary>
            Get an array of all animations used by this controller
            </summary>
        </member>
        <member name="M:CometEngine.AnimatorControllerOverride.#ctor(CometEngine.AnimatorControllerBase)">
            <summary>
            Create a new AnimatorControllerOverride, call AnimatorControllerOverride.Remove() when it is no more needed
            </summary>
        </member>
        <member name="P:CometEngine.AnimatorControllerOverride.animatorController">
            <summary>
            The Animator Controller that the Animator Controller Override overrides 
            </summary>
        </member>
        <member name="P:CometEngine.AnimatorControllerOverride.animationsOverriddenCount">
            <summary>
            The number of animations that this controller is overriding
            </summary>
        </member>
        <member name="P:CometEngine.AnimatorControllerOverride.animationsAbleToOverrideCount">
            <summary>
            The number of animations that this controller can override
            </summary>
        </member>
        <member name="M:CometEngine.AnimatorControllerOverride.GetOverrides">
            <summary>
            Get all original animations with the overrided animation
            </summary>
        </member>
        <member name="M:CometEngine.AnimatorControllerOverride.GetOverride(CometEngine.Animation)">
            <summary>
            Get the animation override or the original if it does not exist or null if the original is not used by the controller
            </summary>
        </member>
        <member name="M:CometEngine.AnimatorControllerOverride.GetOverride(System.String)">
            <summary>
            Get the animation override or the original if it does not exist or null if the original is not used by the controller
            </summary>
        </member>
        <member name="M:CometEngine.AnimatorControllerOverride.SetOverride(CometEngine.Animation,CometEngine.Animation)">
            <summary>
            Set an animation to override
            </summary>
        </member>
        <member name="M:CometEngine.AnimatorControllerOverride.SetOverride(System.String,CometEngine.Animation)">
            <summary>
            Set an animation to override
            </summary>
        </member>
        <member name="M:CometEngine.AnimatorControllerOverride.SetOverride(CometEngine.AnimatorControllerOverrideAnimation)">
            <summary>
            Set an animation to override
            </summary>
        </member>
        <member name="M:CometEngine.AnimatorControllerOverride.SetOverrides(CometEngine.AnimatorControllerOverrideAnimation[])">
            <summary>
            Set all animations to override
            </summary>
        </member>
        <member name="M:CometEngine.AnimatorControllerOverride.Remove(CometEngine.AnimatorControllerOverride)">
            <summary>
            Use it for AnimatorControllerOverrides that has been created at runtime
            </summary>
        </member>
        <member name="P:CometEngine.AudioSample.length">
            <summary>
            Get the lenght of the audio in miliseconds
            </summary>
        </member>
        <member name="P:CometEngine.AudioSample.loadInBackground">
            <summary>
            Does it load in background?
            </summary>
        </member>
        <member name="P:CometEngine.AudioSample.preloadData">
            <summary>
            Preload audio when loading scene
            </summary>
        </member>
        <member name="P:CometEngine.AudioSample.isLoaded">
            <summary>
            Is audio data loaded?
            </summary>
        </member>
        <member name="M:CometEngine.AudioSample.LoadAudio">
            <summary>
            Load audio if preloadData is false
            </summary>
        </member>
        <member name="M:CometEngine.AudioSample.UnloadAudio">
            <summary>
            Unload audio and free memory
            </summary>
        </member>
        <member name="M:CometEngine.CometObject.Create(System.Type)">
            <summary>
            Create a new CometObject from Type
            </summary>
        </member>
        <member name="M:CometEngine.CometObject.Create``1">
            <summary>
            Create a new CometObject from T
            </summary>
        </member>
        <member name="M:CometEngine.CometObject.Copy``1(``0)">
            <summary>
            Create a copy from cometObject and returns it
            </summary>
        </member>
        <member name="M:CometEngine.Material.#ctor(CometEngine.ShaderDefault)">
            <summary>
            Create a new material with a default shader, call Material.Clear() when it is no more needed
            </summary>
        </member>
        <member name="M:CometEngine.Material.#ctor(CometEngine.Shader)">
            <summary>
            Create a new material with a shader, call Material.Clear() when it is no more needed
            </summary>
        </member>
        <member name="M:CometEngine.Material.#ctor(CometEngine.Material)">
            <summary>
            Create a new material copying an existing, call Material.Clear() when it is no more needed
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetByName(System.String)">
            <summary>
            Returns the first material with that name
            </summary>
        </member>
        <member name="P:CometEngine.Material.shader">
            <summary>
            The shader this material has
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetInt(System.String,System.Int32)">
            <summary>
            Set int uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetIntArray(System.String,System.Int32[])">
            <summary>
            Set int array uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetFloat(System.String,System.Single)">
            <summary>
            Set float uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetFloatArray(System.String,System.Single[])">
            <summary>
            Set float array uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetUint(System.String,System.UInt32)">
            <summary>
            Set uint uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetUintArray(System.String,System.UInt32[])">
            <summary>
            Set uint array uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetBoolean(System.String,System.Boolean)">
            <summary>
            Set bool uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetDouble(System.String,System.Double)">
            <summary>
            Set double uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetDoubleArray(System.String,System.Double[])">
            <summary>
            Set double array uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetTexture(System.String,CometEngine.Texture2D)">
            <summary>
            Set sampler2D uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetSampler2DArray(System.String,CometEngine.Texture2D[])">
            <summary>
            Set sampler2D array uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetColor(System.String,CometEngine.Color)">
            <summary>
            Set vec4 uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetColorArray(System.String,CometEngine.Color[])">
            <summary>
            Set vec4 array uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetVector2(System.String,CometEngine.Vector2)">
            <summary>
            Set vec2 uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetVector2Array(System.String,CometEngine.Vector2[])">
            <summary>
            Set vec2 array uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetVector3(System.String,CometEngine.Vector3)">
            <summary>
            Set vec3 uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.SetVector3Array(System.String,CometEngine.Vector3[])">
            <summary>
            Set vec3 array uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetInt(System.String)">
            <summary>
            Get int uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetIntArray(System.String)">
            <summary>
            Get int array uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetUint(System.String)">
            <summary>
            Get uint uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetUintArray(System.String)">
            <summary>
            Get uint array uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetBoolean(System.String)">
            <summary>
            Get bool uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetDouble(System.String)">
            <summary>
            Get double uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetDoubleArray(System.String)">
            <summary>
            Get double array uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetFloat(System.String)">
            <summary>
            Get float uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetFloatArray(System.String)">
            <summary>
            Get float array uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetVector2(System.String)">
            <summary>
            Get vec2 uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetVector2Array(System.String)">
            <summary>
            Get vector2 array uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetVector3(System.String)">
            <summary>
            Get vec3 uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetVector3Array(System.String)">
            <summary>
            Get vec3 array uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetColor(System.String)">
            <summary>
            Get vec4 uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetColorArray(System.String)">
            <summary>
            Get color array uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetTexture(System.String)">
            <summary>
            Get sampler2D uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.GetTextureArray(System.String)">
            <summary>
            Get texture array uniform
            </summary>
        </member>
        <member name="M:CometEngine.Material.Clear(CometEngine.Material)">
            <summary>
            For performance, it is better to unassign this material of the GameObjects before destroying it.
            EX: renderer.material = null;
            EX: Material.Clear(material);
            </summary>
        </member>
        <member name="M:CometEngine.PhysicMaterial.#ctor(System.String)">
            <summary>
            Create a new PhysicMaterial, call PhysicMaterial.Remove() when it is no more needed
            </summary>
        </member>
        <member name="M:CometEngine.PhysicMaterial.#ctor">
            <summary>
            Create a new PhysicMaterial, call PhysicMaterial.Remove() when it is no more needed
            </summary>
        </member>
        <member name="M:CometEngine.PhysicMaterial.Remove(CometEngine.PhysicMaterial)">
            <summary>
            For performance, it is better to unassign this material of the GameObjects before destroying it.
            EX: rigidBody.material = null;
            EX: PhysicMaterial.Remove(material);
            </summary>
        </member>
        <member name="P:CometEngine.PhysicMaterial.friction">
            <summary>
            Surface friction
            </summary>
        </member>
        <member name="P:CometEngine.PhysicMaterial.bounciness">
            <summary>
            Surface bounciness
            </summary>
        </member>
        <member name="P:CometEngine.PhysicMaterial.combineFriction">
            <summary>
            How a collision combine friction
            </summary>
        </member>
        <member name="P:CometEngine.PhysicMaterial.combineBounciness">
            <summary>
            How a collision combine bounciness
            </summary>
        </member>
        <member name="M:CometEngine.RenderTexture.#ctor(CometEngine.RenderTextureDefinition)">
            <summary>
            Create a new RenderTexture, call RenderTexture.Remove() when it is no more needed
            </summary>
        </member>
        <member name="M:CometEngine.RenderTexture.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Create a new RenderTexture, call RenderTexture.Remove() when it is no more needed
            </summary>
        </member>
        <member name="M:CometEngine.RenderTexture.#ctor">
            <summary>
            Create a new RenderTexture, call RenderTexture.Remove() when it is no more needed
            </summary>
        </member>
        <member name="M:CometEngine.RenderTexture.Remove(CometEngine.RenderTexture)">
            <summary>
            For performance, it is better to unassign this renderTexture of the GameObjects before destroying it.
            EX: renderTextureRenderer.renderTexture = null;
            EX: RenderTexture.Remove(renderTexture);
            </summary>
        </member>
        <member name="P:CometEngine.RenderTexture.pivot">
            <summary>
            Returns the pivot of the sprite where (-1, 1) is the top left and (1, -1) is the bottom right
            </summary>
        </member>
        <member name="P:CometEngine.RenderTexture.pixelsPerUnit">
            <summary>
            Returns the number of pixels is a unit of the world
            </summary>
        </member>
        <member name="P:CometEngine.RenderTexture.antiAliasing">
            <summary>
            Anti-aliasing level
            </summary>
        </member>
        <member name="M:CometEngine.Shader.GetByName(System.String)">
            <summary>
            Returns the first shader with that name
            </summary>
        </member>
        <member name="P:CometEngine.Sprite.pivot">
            <summary>
            Returns the pivot of the sprite where (-1, 1) is the top left and (1, -1) is the bottom right
            </summary>
        </member>
        <member name="P:CometEngine.Sprite.pixelsPerUnit">
            <summary>
            Returns the number of pixels is a unit of the world
            </summary>
        </member>
        <member name="P:CometEngine.Sprite.rect">
            <summary>
            Returns the rect of the sprite in the texture in pixels
            </summary>
        </member>
        <member name="P:CometEngine.Sprite.texture">
            <summary>
            Returns the texture this sprite belongs to
            </summary>
        </member>
        <member name="P:CometEngine.Texture.width">
            <summary>
            Returns the width of the texture
            </summary>
        </member>
        <member name="P:CometEngine.Texture.height">
            <summary>
            Returns the height of the texture
            </summary>
        </member>
        <member name="P:CometEngine.Texture.filterType">
            <summary>
            Returns the filter of the texture
            </summary>
        </member>
        <member name="P:CometEngine.Texture.wrapMode">
            <summary>
            Returns the wrap mode of the texture
            </summary>
        </member>
        <member name="P:CometEngine.Texture.wrapModeS">
            <summary>
            Returns the wrap mode S of the texture
            </summary>
        </member>
        <member name="P:CometEngine.Texture.wrapModeT">
            <summary>
            Returns the wrap mode T of the texture
            </summary>
        </member>
        <member name="M:CometEngine.Texture2D.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new texture with a given path (must be with the file extension), call Texture2D.Remove() when it is no more needed
            </summary>
        </member>
        <member name="M:CometEngine.Texture2D.#ctor(CometEngine.Texture2DDefinition)">
            <summary>
            Create a new texture with a given definition, call Texture2D.Remove() when it is no more needed
            </summary>
        </member>
        <member name="M:CometEngine.Texture2D.Remove(CometEngine.Texture2D)">
            <summary>
            For performance, it is better to unassign this texture2D of the GameObjects before destroying it.
            </summary>
        </member>
        <member name="P:CometEngine.Texture2D.arePixelsEditable">
            <summary>
            Returns true if Modify pixels is enabled un the texture settings
            </summary>
        </member>
        <member name="M:CometEngine.Texture2D.GetPixelAt(System.UInt32,System.UInt32)">
            <summary>
            Returns the pixel color at x and y, only if Modify Pixels is enabled
            </summary>
        </member>
        <member name="M:CometEngine.Texture2D.GetPixels">
            <summary>
            Returns the pixels color of the texture, only if Modify Pixels is enabled
            </summary>
        </member>
        <member name="M:CometEngine.Texture2D.SetPixelAt(CometEngine.Color,System.UInt32,System.UInt32)">
            <summary>
            Sets the pixel color at x and y, only if Modify Pixels is enabled. Do not use if setting a lot of pixels, better us SetPixels instead
            </summary>
        </member>
        <member name="M:CometEngine.Texture2D.SetPixels(CometEngine.Color[])">
            <summary>
            Sets the pixels color of the texture, only if Modify Pixels is enabled
            </summary>
        </member>
        <member name="P:CometEngine.Texture2D.pixelsPerUnit">
            <summary>
            Returns the number of pixels is a unit of the world
            </summary>
        </member>
        <member name="P:CometEngine.Texture2D.spriteTextureType">
            <summary>
            Returns whether is a single sprite texture or multiple
            </summary>
        </member>
        <member name="M:CometEngine.Texture2D.GetSprites">
            <summary>
            Returns the array of sprites of the texture
            </summary>
        </member>
        <member name="E:CometEngine.App.onAppClosed">
            <summary>
            Called when application is closed
            </summary>
        </member>
        <member name="P:CometEngine.App.backgroundLoadingPriority">
            <summary>
            Priority of the background loading data
            </summary>
        </member>
        <member name="P:CometEngine.App.companyName">
            <summary>
            Company Name
            </summary>
        </member>
        <member name="P:CometEngine.App.persistentPath">
            <summary>
            Get the user-and-app-specific path where files can be written,
            on windows should be something like this: "C:\\Users\\userName\\AppData\\Roaming\\My Company\\My Program Name\\"
            </summary>
        </member>
        <member name="P:CometEngine.App.mainGamePath">
            <summary>
            Returns the global path of the exe folder
            </summary>
        </member>
        <member name="P:CometEngine.App.dataAssetsPath">
            <summary>
            Returns the folder for data assets
            </summary>
        </member>
        <member name="P:CometEngine.App.isEngineEditor">
            <summary>
            True if the game is running in the comet engine editor
            </summary>
        </member>
        <member name="P:CometEngine.App.productName">
            <summary>
            Product Name
            </summary>
        </member>
        <member name="P:CometEngine.App.stopInBackground">
            <summary>
            True if the application stop when the window has no focus and false if it does not
            </summary>
        </member>
        <member name="P:CometEngine.App.desiredFrameRate">
            <summary>
            The desired frame rate, set it to 0 to disable caping fps
            </summary>
        </member>
        <member name="P:CometEngine.App.currentFrameRate">
            <summary>
            The current frame rate
            </summary>
        </member>
        <member name="P:CometEngine.App.engineVersion">
            <summary>
            Engine Version
            </summary>
        </member>
        <member name="P:CometEngine.App.productVersion">
            <summary>
            The product version
            </summary>
        </member>
        <member name="M:CometEngine.App.Quit">
            <summary>
            When called, app will quit
            </summary>
        </member>
        <member name="M:CometEngine.App.OpenURL(System.String)">
            <summary>
            Opens the url in the default browser
            </summary>
        </member>
        <member name="P:CometEngine.App.vsync">
            <summary>
            Enable/Disable vsync
            </summary>
        </member>
        <member name="M:CometEngine.App.SaveCurrentSettings">
            <summary>
            Save current settings to file
            </summary>
        </member>
        <member name="M:CometEngine.App.LoadSettings">
            <summary>
            Load the settings from file
            </summary>
        </member>
        <member name="P:CometEngine.AudioSystem.currentOutputDevice">
            <summary>
            Current output device
            </summary>
        </member>
        <member name="P:CometEngine.AudioSystem.masterVolume">
            <summary>
            Master Volume that ranges from 0.0F to 1.0F
            </summary>
        </member>
        <member name="P:CometEngine.AudioSystem.rolloffScale">
            <summary>
            Sets a rolloff scale which influences the amount of attenuation that is applied to 3D sounds.
            The rolloff factor can range from 0.0 to 10.0, where 0 is no rolloff. 1.0 is the default 
            rolloff factor set, the value which we also experience in the real world. A value of 2 would mean
            twice the real-world rolloff.
            </summary>
        </member>
        <member name="P:CometEngine.AudioSystem.dopplerFactor">
            <summary>
            Value between 0 and 10 which multiplies the doppler effect.
            Default value is 1.0, which is the real world doppler effect, and 10.0f 
            would be ten times the real world doppler effect
            </summary>
        </member>
        <member name="P:CometEngine.AudioSystem.audioSourceDefaultMinDistance3D">
            <summary>
            Default distance at which a 3D Sound is at its maximum volume
            </summary>
        </member>
        <member name="P:CometEngine.AudioSystem.audioSourceDefaultMaxDistance3D">
            <summary>
            Default distance at which a 3D Sound is inaudible
            </summary>
        </member>
        <member name="M:CometEngine.AudioSystem.ResumeAll">
            <summary>
            Resume all sounds
            </summary>
        </member>
        <member name="M:CometEngine.AudioSystem.PauseAll">
            <summary>
            Pause all sounds
            </summary>
        </member>
        <member name="M:CometEngine.AudioSystem.StopAll">
            <summary>
            Stop all sounds
            </summary>
        </member>
        <member name="M:CometEngine.AudioSystem.SaveCurrentSettings">
            <summary>
            Save current audio settings to file
            </summary>
        </member>
        <member name="M:CometEngine.AudioSystem.LoadSettings">
            <summary>
            Load the audio file settings
            </summary>
        </member>
        <member name="M:CometEngine.AudioSystem.GetOutputDevices">
            <summary>
            Array of the output devices, it can be null
            </summary>
        </member>
        <member name="P:CometEngine.Cursor.visible">
            <summary>
            True if the cursor is being rendered and false if not
            </summary>
        </member>
        <member name="M:CometEngine.Cursor.SetSystemCursor(CometEngine.SystemCursor)">
            <summary>
            Set a system default cursor
            </summary>
        </member>
        <member name="M:CometEngine.Cursor.SetCursor(CometEngine.Texture2D,CometEngine.Vector2i)">
            <summary>
            Set the hotspot and texture for the cursor, setting texture as null will set the cursor as the default in Player Settings
            </summary>
        </member>
        <member name="P:CometEngine.Graphics.useLightMaterialsByDefault">
            <summary>
            Objects will be created with light materials if true
            </summary>
        </member>
        <member name="P:CometEngine.Graphics.loadTexturesAsynchronous">
            <summary>
            True if you want to load all textures async
            </summary>
        </member>
        <member name="P:CometEngine.Graphics.antiAliasing">
            <summary>
            Anti-aliasing level
            </summary>
        </member>
        <member name="M:CometEngine.Graphics.SaveCurrentSettings">
            <summary>
            Save current graphics settings to file
            </summary>
        </member>
        <member name="M:CometEngine.Graphics.LoadSettings">
            <summary>
            Load the graphics file settings
            </summary>
        </member>
        <member name="E:CometEngine.Input.onControllerDeviceConnected">
            <summary>
            Called when a controller device is connected
            </summary>
        </member>
        <member name="E:CometEngine.Input.onControllerDeviceDisconnected">
            <summary>
            Called when a controller device is disconnected
            </summary>
        </member>
        <member name="P:CometEngine.Input.anyKey">
            <summary>
            Returns true if any keyboard key is pressed
            </summary>
        </member>
        <member name="P:CometEngine.Input.anyKeyDown">
            <summary>
            Returns true if any keyboard key is down
            </summary>
        </member>
        <member name="P:CometEngine.Input.anyKeyUp">
            <summary>
            Returns true if any keyboard key is up
            </summary>
        </member>
        <member name="P:CometEngine.Input.anyMouseButton">
            <summary>
            Returns true if any mouse button is pressed
            </summary>
        </member>
        <member name="P:CometEngine.Input.anyMouseButtonDown">
            <summary>
            Returns true if any mouse button is down
            </summary>
        </member>
        <member name="P:CometEngine.Input.anyMouseButtonUp">
            <summary>
            Returns true if any mouse button is up
            </summary>
        </member>
        <member name="P:CometEngine.Input.mousePosition">
            <summary>
            Returns the mouse position, top - left is 0,0
            </summary>
        </member>
        <member name="P:CometEngine.Input.mouseMotion">
            <summary>
            Returns the mouse motion
            </summary>
        </member>
        <member name="P:CometEngine.Input.mouseScrollMotion">
            <summary>
            Returns the mouse scroll motion
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetKey(CometEngine.KeyCode)">
            <summary>
            Returns true if the key is pressed
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetKeyDown(CometEngine.KeyCode)">
            <summary>
            Returns true the first frame the key is pressed
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetKeyUp(CometEngine.KeyCode)">
            <summary>
            Returns true when the key is released
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetMouseButton(CometEngine.MouseCode)">
            <summary>
            Returns true if the mouse button is pressed
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetMouseButtonDown(CometEngine.MouseCode)">
            <summary>
            Returns true the first frame the mouse button is pressed
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetMouseButtonUp(CometEngine.MouseCode)">
            <summary>
            Returns true when the mouse button is released
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetControllerType(CometEngine.ControllerNumber)">
            <summary>
            Returns the type of the controller
            The controller number one has number 1, controller number two has number 2... and so on
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetControllersConnected">
            <summary>
            Returns an array of the connected controllers
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetControllerButton(CometEngine.ControllerCode)">
            <summary>
            Returns true when the controller button is pressed in any controller
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetControllerButton(CometEngine.ControllerCode,CometEngine.ControllerNumber)">
            <summary>
            Returns true when the controller button is pressed only in the controller that has controllerNumber
            The controller number one has number 1, controller number two has number 2... and so on
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetControllerButtonDown(CometEngine.ControllerCode)">
            <summary>
            Returns true when the controller button is down in any controller
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetControllerButtonDown(CometEngine.ControllerCode,CometEngine.ControllerNumber)">
            <summary>
            Returns true when the controller button is down only in the controller that has controllerNumber
            The controller number one has number 1, controller number two has number 2... and so on
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetControllerButtonUp(CometEngine.ControllerCode)">
            <summary>
            Returns true when the controller button is up in any controller
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetControllerButtonUp(CometEngine.ControllerCode,CometEngine.ControllerNumber)">
            <summary>
            Returns true when the controller button is up only in the controller that has controllerNumber
            The controller number one has number 1, controller number two has number 2... and so on
            </summary>
        </member>
        <member name="M:CometEngine.Input.MakeControllerRumble(System.Single,System.Single)">
            <summary>
            Rumble all available controllers: strength goes between 0 - 1 and duration is 1000 = 1s
            </summary>
        </member>
        <member name="M:CometEngine.Input.MakeControllerRumble(System.Single,System.Single,CometEngine.ControllerNumber)">
            <summary>
            Rumble the controller with controllerNumber: strength goes between 0 - 1 and duration is 1000 = 1s
            The controller number one has number 1, controller number two has number 2... and so on
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetControllerTriggerValue(CometEngine.ControllerTrigger,CometEngine.ControllerNumber)">
            <summary>
            Returns the trigger value between 0 to 1
            The controller number one has number 1, controller number two has number 2... and so on
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetControllerAxisValue(CometEngine.ControllerAxis,CometEngine.ControllerNumber)">
            <summary>
            Returns the axis value between 0 to 1
            The controller number one has number 1, controller number two has number 2... and so on
            </summary>
        </member>
        <member name="M:CometEngine.Input.GetAction(System.String)">
            <summary>
            Find the first action called actionName and returns true if it is done
            </summary>
        </member>
        <member name="P:CometEngine.Physics.velocityIterations">
            <summary>
            The number of iterations of the physics solver when considering objects' velocities
            </summary>
        </member>
        <member name="P:CometEngine.Physics.positionIterations">
            <summary>
            The number of iterations of the physics solver when considering objects' positions
            </summary>
        </member>
        <member name="P:CometEngine.Physics.gravity">
            <summary>
            Acceleration due to gravity
            </summary>
        </member>
        <member name="P:CometEngine.Physics.raycastHitTriggers">
            <summary>
            Should raycast hit triggers?
            </summary>
        </member>
        <member name="P:CometEngine.Physics.maxRotationSpeed">
            <summary>
            The maximum angular speed of a rigid-body per physics update
            </summary>
        </member>
        <member name="P:CometEngine.Physics.velocityThreshold">
            <summary>
            Any collisions with a relative linear velocity below this threshold will be treated as inelastic
            </summary>
        </member>
        <member name="P:CometEngine.Physics.maxLinearCorrection">
            <summary>
            The maximum linear position correction used when solving constraints
            </summary>
        </member>
        <member name="P:CometEngine.Physics.maxAngularCorrection">
            <summary>
            The maximum angular position correction used when solving constraints
            </summary>
        </member>
        <member name="P:CometEngine.Physics.maxTranslationSpeed">
            <summary>
            The maximum linear speed of a rigid-body per physics update
            </summary>
        </member>
        <member name="P:CometEngine.Physics.baumgarteScale">
            <summary>
            The scale factor that controls how fast overlaps are resolved
            </summary>
        </member>
        <member name="P:CometEngine.Physics.baumgarteTOIScale">
            <summary>
            The scale factor that controls how fast TOI overlaps are resolved
            </summary>
        </member>
        <member name="P:CometEngine.Physics.colliderAwakeColor">
            <summary>
            The color used by the gizmos to show all awake colliders
            </summary>
        </member>
        <member name="P:CometEngine.Physics.colliderAsleepColor">
            <summary>
            The color used by the gizmos to show all asleep colliders
            </summary>
        </member>
        <member name="P:CometEngine.Physics.colliderAABBColor">
            <summary>
            Sets the color used by the gizmos to show all Collider axis-aligned bounding boxes
            </summary>
        </member>
        <member name="P:CometEngine.Physics.showColliderAABB">
            <summary>
            Should the collider gizmos show the AABBs for each collider?
            </summary>
        </member>
        <member name="P:CometEngine.Physics.showColliderSleep">
            <summary>
            Should the collider gizmos show the sleep-state for each collider?
            </summary>
        </member>
        <member name="P:CometEngine.Physics.alwaysShowColliders">
            <summary>
            Should the collider gizmos always be shown even when they are not selected?
            </summary>
        </member>
        <member name="P:CometEngine.Physics.angularSleepTolerance">
            <summary>
            A rigid-body cannot sleep if its angular velocity is above this tolerance
            </summary>
        </member>
        <member name="P:CometEngine.Physics.linearSleepTolerance">
            <summary>
            A rigid-body cannot sleep if its linear velocity is above this tolerance
            </summary>
        </member>
        <member name="P:CometEngine.Physics.timeToSleep">
            <summary>
            The time in seconds that a rigid-body must be still before it will go to sleep
            </summary>
        </member>
        <member name="P:CometEngine.Physics.defaultContactOffset">
            <summary>
            The default contact offset of the newly created colliders
            </summary>
        </member>
        <member name="M:CometEngine.Physics.ClosestPoint(CometEngine.Vector2,CometEngine.Collider)">
            <summary>
            Get the closest point for the collider
            </summary>
        </member>
        <member name="M:CometEngine.Physics.Distance(CometEngine.Collider,CometEngine.Collider)">
            <summary>
            Get the minimum distance between colliderA and colliderB
            </summary>
        </member>
        <member name="M:CometEngine.Physics.GetContacts(CometEngine.Collider)">
            <summary>
            Retrieves all Colliders in contact with the Collider
            </summary>
        </member>
        <member name="M:CometEngine.Physics.ShouldCollide(CometEngine.Collider,CometEngine.Collider)">
            <summary>
            Check if these two colliders can collide
            </summary>
        </member>
        <member name="M:CometEngine.Physics.DoTheseLayersCollide(System.Int32,System.Int32)">
            <summary>
            Check if these two layeres collide
            </summary>
        </member>
        <member name="M:CometEngine.Physics.GetLayerCollisionMask(System.Int32)">
            <summary>
            Get the collision layer mask that indicates which layer(s) the specified layer can collide with
            </summary>
        </member>
        <member name="M:CometEngine.Physics.IgnoreLayerCollision(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Choose whether to detect or ignore collisions between a specified pair of layers
            </summary>
        </member>
        <member name="M:CometEngine.Physics.IsTouching(CometEngine.Collider,CometEngine.Collider)">
            <summary>
            Returns true if theses colliders are touching
            </summary>
        </member>
        <member name="M:CometEngine.Physics.IsTouchingLayers(CometEngine.Collider,System.Int32)">
            <summary>
            Returns true if this collider is touching any collider having that mask
            </summary>
        </member>
        <member name="M:CometEngine.Physics.SetLayerCollisionMask(System.Int32,CometEngine.LayerMask)">
            <summary>
            Set the collision layer mask that indicates which layer(s) the specified layer can collide with
            </summary>
        </member>
        <member name="M:CometEngine.Physics.RaycastClosest(CometEngine.Vector2,CometEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Casts a ray against Colliders in the Scene and returns the closest. If there is not hit, raycasthit.collider will be null
            </summary>
        </member>
        <member name="M:CometEngine.Physics.RaycastAny(CometEngine.Vector2,CometEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Casts a ray against Colliders in the Scene and returns the first one. If there is not hit, raycasthit.collider will be null
            </summary>
        </member>
        <member name="M:CometEngine.Physics.Raycast(CometEngine.Vector2,CometEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Casts a ray against Colliders in the Scene and returns an array of all hits
            </summary>
        </member>
        <member name="M:CometEngine.Physics.QueryAABB(CometEngine.Vector2,CometEngine.Vector2,System.Int32,System.Single,System.Single)">
            <summary>
            Query an AABB and return an array of all colliders touching
            </summary>
        </member>
        <member name="P:CometEngine.Random.value">
            <summary>
            Returns random float between 0 [inclusive] and 1 [inclusive]
            </summary>
        </member>
        <member name="P:CometEngine.Random.seed">
            <summary>
            Seed for the random numbers
            </summary>
        </member>
        <member name="M:CometEngine.Random.RangeInt(System.Int32,System.Int32)">
            <summary>
            Returns random int between min [inclusive] and max [inclusive]
            </summary>
        </member>
        <member name="M:CometEngine.Random.RangeFloat(System.Single,System.Single)">
            <summary>
            Returns random float between min [inclusive] and max [inclusive]
            </summary>
        </member>
        <member name="M:CometEngine.Random.RangeDouble(System.Double,System.Double)">
            <summary>
            Returns random double between min [inclusive] and max [inclusive]
            </summary>
        </member>
        <member name="M:CometEngine.RuntimeAssets.Load``1(System.String)">
            <summary>
            Load an asset from a RuntimeAssets folder from the project. It is recommended to call Unload after using the asset in order to free memory.
            Unload just needs to be called once, it does not matter how many times Load has been called.
            </summary>
        </member>
        <member name="M:CometEngine.RuntimeAssets.LoadScene(System.String)">
            <summary>
            Load a scene from a RuntimeAssets folder from the project, this method dos not change the scene. Use CometEngine.SceneManagement to change the scene
            </summary>
        </member>
        <member name="M:CometEngine.RuntimeAssets.Unload(CometEngine.Resource)">
            <summary>
            Unload an asset previously loaded, this will unload the asset once any object is using it
            </summary>
        </member>
        <member name="M:CometEngine.RuntimeAssets.UnloadAll">
            <summary>
            Unload all assets previously loaded, this will unload the asset once any object is using it
            </summary>
        </member>
        <member name="M:CometEngine.ScreenCapture.Capture(System.String,System.Boolean)">
            <summary>
            Path without extension to save the current game image
            </summary>
        </member>
        <member name="P:CometEngine.Time.deltaTime">
            <summary>
            The last frame seconds
            </summary>
        </member>
        <member name="P:CometEngine.Time.unscaledDeltaTime">
            <summary>
            The timeScale independent last frame seconds
            </summary>
        </member>
        <member name="P:CometEngine.Time.framesSinceStart">
            <summary>
            The total numbers of frames since the start of the game
            </summary>
        </member>
        <member name="P:CometEngine.Time.applicationTime">
            <summary>
            The total time since the start of the game
            </summary>
        </member>
        <member name="P:CometEngine.Time.startFrameTime">
            <summary>
            The total dependent scale time at the start of the frame
            </summary>
        </member>
        <member name="P:CometEngine.Time.startFrameUnscaledTime">
            <summary>
            The total independent scale time at the start of the frame
            </summary>
        </member>
        <member name="P:CometEngine.Time.gameTime">
            <summary>
            The total dependent scale time since the start of the game
            </summary>
        </member>
        <member name="P:CometEngine.Time.unscaledGameTime">
            <summary>
            The total independent scale time since the start of the game
            </summary>
        </member>
        <member name="P:CometEngine.Time.timeScale">
            <summary>
            The scale at which time passes
            </summary>
        </member>
        <member name="P:CometEngine.Time.sceneTime">
            <summary>
            The time passed since last scene loaded
            </summary>
        </member>
        <member name="P:CometEngine.Time.fixedDeltaTime">
            <summary>
            Time in seconds at which physics updates
            </summary>
        </member>
        <member name="P:CometEngine.Time.fixedGameTime">
            <summary>
            The total time dependent scale time in seconds passed since last FixedUpdate
            </summary>
        </member>
        <member name="P:CometEngine.Time.fixedUnscaledGameTime">
            <summary>
            The total time independent scale time in seconds passed since last FixedUpdate
            </summary>
        </member>
        <member name="E:CometEngine.Window.onWindowFocusLost">
            <summary>
            Called when window loses the focus (in editor window means the game panel)
            </summary>
        </member>
        <member name="E:CometEngine.Window.onWindowFocusGained">
            <summary>
            Called when window gains the focus (in editor window means the game panel)
            </summary>
        </member>
        <member name="E:CometEngine.Window.onWindowResized">
            <summary>
            Called when window is resized (in editor window means the engine window)
            </summary>
        </member>
        <member name="E:CometEngine.Window.onWindowMaximized">
            <summary>
            Called when window is maximized (only called on build)
            </summary>
        </member>
        <member name="E:CometEngine.Window.onWindowMinimized">
            <summary>
            Called when window is minimized (only called on build)
            </summary>
        </member>
        <member name="E:CometEngine.Window.onWindowRestored">
            <summary>
            Called when window is restored (only called on build)
            </summary>
        </member>
        <member name="P:CometEngine.Window.width">
            <summary>
            The width of the window in pixels
            </summary>
        </member>
        <member name="P:CometEngine.Window.height">
            <summary>
            The height of the window in pixels
            </summary>
        </member>
        <member name="P:CometEngine.Window.brightness">
            <summary>
            The brightness of the window
            Value between 0.0F - 1.0F
            </summary>
        </member>
        <member name="P:CometEngine.Window.minimumSize">
            <summary>
            The minimum size of the window in pixels
            </summary>
        </member>
        <member name="P:CometEngine.Window.maximumSize">
            <summary>
            The maximum size of the window in pixels
            </summary>
        </member>
        <member name="P:CometEngine.Window.bordered">
            <summary>
            True if the window is bordered
            </summary>
        </member>
        <member name="P:CometEngine.Window.resizable">
            <summary>
            True if the window can be resized
            </summary>
        </member>
        <member name="P:CometEngine.Window.isFocused">
            <summary>
            True if the window is focused
            </summary>
        </member>
        <member name="P:CometEngine.Window.isMinimized">
            <summary>
            True if the window is minimized
            </summary>
        </member>
        <member name="P:CometEngine.Window.isMaximized">
            <summary>
            True if the window is maximized
            </summary>
        </member>
        <member name="P:CometEngine.Window.fullScreenMode">
            <summary>
            Mode of the window
            </summary>
        </member>
        <member name="M:CometEngine.Window.GetAvailableResolutions">
            <summary>
            Returns an array of available resolutions
            </summary>
        </member>
        <member name="M:CometEngine.Window.SetResolution(CometEngine.Resolution)">
            <summary>
            Set window resolution
            </summary>
        </member>
        <member name="P:CometEngine.Window.currentResolution">
            <summary>
            Set window resolution
            </summary>
        </member>
        <member name="M:CometEngine.Window.SaveCurrentSettings">
            <summary>
            save current window settings to file
            </summary>
        </member>
        <member name="M:CometEngine.Window.LoadSettings">
            <summary>
            Load the window file settings
            </summary>
        </member>
        <member name="P:CometEngine.AnimatorControllerOverrideAnimation.originalAnimation">
            <summary>
            Original Animator Controller Animation
            </summary>
        </member>
        <member name="P:CometEngine.AnimatorControllerOverrideAnimation.overriddenAnimation">
            <summary>
            Overridden Animation
            </summary>
        </member>
        <member name="P:CometEngine.AnimatorControllerParameter.type">
            <summary>
            Type of the parameter
            </summary>
        </member>
        <member name="P:CometEngine.AnimatorControllerParameter.name">
            <summary>
            Name of the parameter
            </summary>
        </member>
        <member name="P:CometEngine.AnimatorControllerParameter.boolValue">
            <summary>
            Value valid for type BOOL and TRIGGER
            </summary>
        </member>
        <member name="P:CometEngine.AnimatorControllerParameter.intValue">
            <summary>
            Value valid for type INT
            </summary>
        </member>
        <member name="P:CometEngine.AnimatorControllerParameter.floatValue">
            <summary>
            Value valid for type FLOAT
            </summary>
        </member>
        <member name="P:CometEngine.AnimatorControllerParameter.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:CometEngine.AnimatorStateInfo.animation">
            <summary>
            Animation of the state
            </summary>
        </member>
        <member name="P:CometEngine.AnimatorStateInfo.fullName">
            <summary>
            Name that contains parent machines inside with '/'
            </summary>
        </member>
        <member name="P:CometEngine.AnimatorStateInfo.name">
            <summary>
            Name of the state
            </summary>
        </member>
        <member name="P:CometEngine.AnimatorStateInfo.normalizedTime">
            <summary>
            Normalized time (0 - 1) of completation
            </summary>
        </member>
        <member name="P:CometEngine.AnimatorStateInfo.speed">
            <summary>
            Speed of the state
            </summary>
        </member>
        <member name="P:CometEngine.ColliderDistance.distance">
            <summary>
            Distance between the two points
            </summary>
        </member>
        <member name="P:CometEngine.ColliderDistance.isOverlapped">
            <summary>
            Indicates whether the colliders are overlapping.
            </summary>
        </member>
        <member name="P:CometEngine.ColliderDistance.isValid">
            <summary>
            Indicates whether the collider distance is valid or not
            </summary>
        </member>
        <member name="P:CometEngine.ColliderDistance.pointA">
            <summary>
            The contact point A
            </summary>
        </member>
        <member name="P:CometEngine.ColliderDistance.pointB">
            <summary>
            The contact point B
            </summary>
        </member>
        <member name="T:CometEngine.Color">
            <summary>
            Struct that represents a Color with the four components (red, green, blue and alpha) that range between 0.0F to 1.0F.
            </summary>
        </member>
        <member name="F:CometEngine.Color.r">
            <summary>
            Red component.
            </summary>
        </member>
        <member name="F:CometEngine.Color.g">
            <summary>
            Green component.
            </summary>
        </member>
        <member name="F:CometEngine.Color.b">
            <summary>
            Blue component.
            </summary>
        </member>
        <member name="F:CometEngine.Color.a">
            <summary>
            Alpha component.
            </summary>
        </member>
        <member name="P:CometEngine.Color.grayScale">
            <summary>
            Get the gray scale format from the current Color.
            </summary>
        </member>
        <member name="P:CometEngine.Color.maxComponent">
            <summary>
            Get the maximum value of a component.
            </summary>
        </member>
        <member name="P:CometEngine.Color.black">
            <summary>
            RGBA (0,0,0,1)
            </summary>
        </member>
        <member name="P:CometEngine.Color.blue">
            <summary>
            RGBA (0,0,1,1)
            </summary>
        </member>
        <member name="P:CometEngine.Color.clear">
            <summary>
            RGBA (0,0,0,0)
            </summary>
        </member>
        <member name="P:CometEngine.Color.cyan">
            <summary>
            RGBA (0,1,1,1)
            </summary>
        </member>
        <member name="P:CometEngine.Color.gray">
            <summary>
            RGBA (0.5,0.5,0.5,1)
            </summary>
        </member>
        <member name="P:CometEngine.Color.grey">
            <summary>
            RGBA (0.5,0.5,0.5,1)
            </summary>
        </member>
        <member name="P:CometEngine.Color.green">
            <summary>
            RGBA (0,1,0,1)
            </summary>
        </member>
        <member name="P:CometEngine.Color.magenta">
            <summary>
            RGBA (1,0,1,1)
            </summary>
        </member>
        <member name="P:CometEngine.Color.red">
            <summary>
            RGBA (1,0,0,1)
            </summary>
        </member>
        <member name="P:CometEngine.Color.white">
            <summary>
            RGBA (1,1,1,1)
            </summary>
        </member>
        <member name="P:CometEngine.Color.yellow">
            <summary>
            RGBA (1, 0.92, 0.016, 1)
            </summary>
        </member>
        <member name="P:CometEngine.ContactPoint.point">
            <summary>
            The point of contact between the two colliders in world space
            </summary>
        </member>
        <member name="P:CometEngine.ContactPoint.normal">
            <summary>
            Surface normal at the contact point
            </summary>
        </member>
        <member name="P:CometEngine.ContactPoint.normalImpulse">
            <summary>
            Gets the impulse applied at the contact point along the ContactPoint.normal
            </summary>
        </member>
        <member name="P:CometEngine.ContactPoint.tangentImpulse">
            <summary>
            Gets the impulse applied at the contact point which is perpendicular to the ContactPoint.normal
            </summary>
        </member>
        <member name="P:CometEngine.ContactPoint.colliderA">
            <summary>
            The collider A of the two colliders in the contact
            </summary>
        </member>
        <member name="P:CometEngine.ContactPoint.colliderB">
            <summary>
            The collider B of the two colliders in the contact
            </summary>
        </member>
        <member name="P:CometEngine.ContactPoint.rigidBodyA">
            <summary>
            The rigidBody A of the two in the contact
            </summary>
        </member>
        <member name="P:CometEngine.ContactPoint.rigidBodyB">
            <summary>
            The rigidBody B of the two in the contact
            </summary>
        </member>
        <member name="P:CometEngine.ContactPoint.enabled">
            <summary>
            Indicates whether the collision response or reaction is enabled or disabled
            </summary>
        </member>
        <member name="M:CometEngine.LayerMask.GetMultiMask(System.String[])">
            <summary>
            Return the mask
            </summary>
        </member>
        <member name="M:CometEngine.LayerMask.GetSingleMask(System.String)">
            <summary>
            Return the mask
            </summary>
        </member>
        <member name="M:CometEngine.LayerMask.LayerNumberToMask(System.Int32)">
            <summary>
            Return the mask of the number of a layer
            </summary>
        </member>
        <member name="M:CometEngine.LayerMask.GetLayerNumber(System.String)">
            <summary>
            Return the number of the layer name
            </summary>
        </member>
        <member name="M:CometEngine.LayerMask.GetLayerName(System.Int32)">
            <summary>
            Return the name of the layerNumber
            </summary>
        </member>
        <member name="M:CometEngine.LayerMask.GetSingleMaskName(System.Int32)">
            <summary>
            Return the name of the mask
            </summary>
        </member>
        <member name="F:CometEngine.LayerMask.maskValue">
            <summary>
            Value of the mask
            </summary>
        </member>
        <member name="P:CometEngine.Quaternion.identity">
            <summary>
            (0, 0, 0, 1)
            </summary>
        </member>
        <member name="M:CometEngine.Quaternion.Dot(CometEngine.Quaternion)">
            <summary>
            Return the Dot product 
            </summary>
        </member>
        <member name="P:CometEngine.Quaternion.eulerAngles">
            <summary>
            Quaternion eulerAngles in degrees
            </summary>
        </member>
        <member name="P:CometEngine.Quaternion.normalized">
            <summary>
            Returns a quaternion with magnitud of 1
            </summary>
        </member>
        <member name="M:CometEngine.Quaternion.Normalize">
            <summary>
            Makes this quaternion to havemagnitud of 1
            </summary>
        </member>
        <member name="M:CometEngine.Quaternion.AngleAxis(System.Single,CometEngine.Vector3)">
            <summary>
            Creates a new Quaternion with anglesDegrees and an axis
            </summary>
        </member>
        <member name="M:CometEngine.Quaternion.RotateFromTo(CometEngine.Vector3,CometEngine.Vector3)">
            <summary>
            Return a new Quaternion that rotates from source to target
            </summary>
        </member>
        <member name="M:CometEngine.Quaternion.Set(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the x, y, z and w of this quaternion
            </summary>
        </member>
        <member name="M:CometEngine.Quaternion.ToAxisAngle(CometEngine.Vector3@,System.Single@)">
            <summary>
            Get the axis and angle of this quaternion
            </summary>
        </member>
        <member name="P:CometEngine.Quaternion.angle">
            <summary>
            Returns the angle of this quaternion
            </summary>
        </member>
        <member name="M:CometEngine.Quaternion.FromEuler(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new Quaternion with euler angles in degrees
            </summary>
        </member>
        <member name="M:CometEngine.Quaternion.Inverse">
            <summary>
            Inverse this quaternion
            </summary>
        </member>
        <member name="M:CometEngine.Quaternion.Lerp(CometEngine.Quaternion,CometEngine.Quaternion,System.Single)">
            <summary>
            Interpolates between a and b by t
            </summary>
        </member>
        <member name="M:CometEngine.Quaternion.LerpUnclamped(CometEngine.Quaternion,CometEngine.Quaternion,System.Single)">
            <summary>
            Interpolates between a and b by t
            </summary>
        </member>
        <member name="M:CometEngine.Quaternion.Slerp(CometEngine.Quaternion,CometEngine.Quaternion,System.Single)">
            <summary>
            Spherically between a and b by t
            </summary>
        </member>
        <member name="M:CometEngine.Quaternion.SlerpUnclamped(CometEngine.Quaternion,CometEngine.Quaternion,System.Single)">
            <summary>
            Spherically between a and b by t
            </summary>
        </member>
        <member name="P:CometEngine.Quaternion.inverted">
            <summary>
            Return the inverted quaternion
            </summary>
        </member>
        <member name="M:CometEngine.Quaternion.AngleBetween(CometEngine.Quaternion,CometEngine.Quaternion)">
            <summary>
            Return the angle between two quaternions in radians
            </summary>
        </member>
        <member name="P:CometEngine.RaycastHit.rayOrigin">
            <summary>
            The point in world space of the ray origin
            </summary>
        </member>
        <member name="P:CometEngine.RaycastHit.point">
            <summary>
            The point in world space where the ray hit the collider's surface
            </summary>
        </member>
        <member name="P:CometEngine.RaycastHit.normal">
            <summary>
            The normal vector of the surface hit by the ray
            </summary>
        </member>
        <member name="P:CometEngine.RaycastHit.distance">
            <summary>
            The distance from the ray origin to the impact point
            </summary>
        </member>
        <member name="P:CometEngine.RaycastHit.fraction">
            <summary>
            Fraction of the distance along the ray that the hit occurred
            </summary>
        </member>
        <member name="P:CometEngine.RaycastHit.collider">
            <summary>
            The collider hit by the ray
            </summary>
        </member>
        <member name="P:CometEngine.RaycastHit.rigidbody">
            <summary>
            The Rigidbody attached to the object that was hit
            </summary>
        </member>
        <member name="P:CometEngine.RaycastHit.transform">
            <summary>
            The transform of the object that was hit
            </summary>
        </member>
        <member name="P:CometEngine.Vector2.down">
            <summary>
            (0, -1)
            </summary>
        </member>
        <member name="P:CometEngine.Vector2.length">
            <summary>
            Returns the length of the vector
            </summary>
        </member>
        <member name="P:CometEngine.Vector2.sqrLength">
            <summary>
            Returns the squared length of the vector
            </summary>
        </member>
        <member name="P:CometEngine.Vector2.normalized">
            <summary>
            Returns this vector with a magnitude of 1
            </summary>
        </member>
        <member name="M:CometEngine.Vector2.Set(System.Single,System.Single)">
            <summary>
            Set this vector with new x,y and z
            </summary>
        </member>
        <member name="M:CometEngine.Vector2.DistanceSqr(CometEngine.Vector2,CometEngine.Vector2)">
            <summary>
            Returns the squared distance between a and b
            </summary>
        </member>
        <member name="M:CometEngine.Vector2.Distance(CometEngine.Vector2,CometEngine.Vector2)">
            <summary>
            Returns the distance between a and b
            </summary>
        </member>
        <member name="M:CometEngine.Vector2.Dot(CometEngine.Vector2,CometEngine.Vector2)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
        </member>
        <member name="M:CometEngine.Vector2.Lerp(CometEngine.Vector2,CometEngine.Vector2,System.Single)">
            <summary>
            Linearly interpolates between two vectors
            </summary>
        </member>
        <member name="M:CometEngine.Vector2.Max(CometEngine.Vector2,CometEngine.Vector2)">
            <summary>
            Returns a vector that is made from the largest components of two vectors.
            </summary>
        </member>
        <member name="M:CometEngine.Vector2.Min(CometEngine.Vector2,CometEngine.Vector2)">
            <summary>
            Returns a vector that is made from the smallest components of two vectors.
            </summary>
        </member>
        <member name="M:CometEngine.Vector2.Lerp(CometEngine.Vector2,CometEngine.Vector2,CometEngine.Vector2)">
            <summary>
            Linearly interpolates between two vectors
            </summary>
        </member>
        <member name="M:CometEngine.Vector2.LerpUnclamped(CometEngine.Vector2,CometEngine.Vector2,System.Single)">
            <summary>
            Linearly interpolates between two vectors
            </summary>
        </member>
        <member name="M:CometEngine.Vector2.LerpUnclamped(CometEngine.Vector2,CometEngine.Vector2,CometEngine.Vector2)">
            <summary>
            Linearly interpolates between two vectors
            </summary>
        </member>
        <member name="M:CometEngine.Vector2.Angle(CometEngine.Vector2,CometEngine.Vector2)">
            <summary>
            Returns the angle in degrees between from and to.
            </summary>
        </member>
        <member name="M:CometEngine.Vector2.Normalize">
            <summary>
            Makes this vector to have a length of 1.
            </summary>
        </member>
        <member name="M:CometEngine.Vector2.Perpendicular(CometEngine.Vector2)">
            <summary>
            Returns a new Vector2 perpendicular to vector
            </summary>
        </member>
        <member name="P:CometEngine.Vector2.left">
            <summary>
            (-1, 0)
            </summary>
        </member>
        <member name="P:CometEngine.Vector2.negativeInfinity">
            <summary>
            (float.NegativeInfinity, float.NegativeInfinity)
            </summary>
        </member>
        <member name="P:CometEngine.Vector2.one">
            <summary>
            (1, 1)
            </summary>
        </member>
        <member name="P:CometEngine.Vector2.positiveInfinity">
            <summary>
            (float.PositiveInfinity, float.PositiveInfinity)
            </summary>
        </member>
        <member name="P:CometEngine.Vector2.right">
            <summary>
            (1, 0)
            </summary>
        </member>
        <member name="P:CometEngine.Vector2.up">
            <summary>
            (0, 1)
            </summary>
        </member>
        <member name="P:CometEngine.Vector2.zero">
            <summary>
            (0, 0)
            </summary>
        </member>
        <member name="M:CometEngine.Vector2.Abs">
            <summary>
            Returns a new Vector2 with absolut value of each component
            </summary>
        </member>
        <member name="M:CometEngine.Vector2.MoveTowards(CometEngine.Vector2,System.Single)">
            <summary>
            Calculates a new position moving maxDelta
            </summary>
        </member>
        <member name="M:CometEngine.Vector2.Scale(CometEngine.Vector2,CometEngine.Vector2)">
            <summary>
            Returns a vector that is made from the largest components of two vectors.
            </summary>
        </member>
        <member name="P:CometEngine.Vector2i.down">
            <summary>
            (0, -1)
            </summary>
        </member>
        <member name="P:CometEngine.Vector2i.length">
            <summary>
            Returns the length of the vector
            </summary>
        </member>
        <member name="P:CometEngine.Vector2i.sqrLength">
            <summary>
            Returns the squared length of the vector
            </summary>
        </member>
        <member name="M:CometEngine.Vector2i.Set(System.Int32,System.Int32)">
            <summary>
            Set this vector with new x,y and z
            </summary>
        </member>
        <member name="M:CometEngine.Vector2i.DistanceSqr(CometEngine.Vector2i,CometEngine.Vector2i)">
            <summary>
            Returns the squared distance between a and b
            </summary>
        </member>
        <member name="M:CometEngine.Vector2i.Distance(CometEngine.Vector2i,CometEngine.Vector2i)">
            <summary>
            Returns the distance between a and b
            </summary>
        </member>
        <member name="M:CometEngine.Vector2i.Max(CometEngine.Vector2i,CometEngine.Vector2i)">
            <summary>
            Returns a vector that is made from the largest components of two vectors.
            </summary>
        </member>
        <member name="M:CometEngine.Vector2i.Min(CometEngine.Vector2i,CometEngine.Vector2i)">
            <summary>
            Returns a vector that is made from the smallest components of two vectors.
            </summary>
        </member>
        <member name="M:CometEngine.Vector2i.Perpendicular(CometEngine.Vector2i)">
            <summary>
            Returns a new Vector2i perpendicular to vector
            </summary>
        </member>
        <member name="P:CometEngine.Vector2i.left">
            <summary>
            (-1, 0)
            </summary>
        </member>
        <member name="P:CometEngine.Vector2i.one">
            <summary>
            (1, 1)
            </summary>
        </member>
        <member name="P:CometEngine.Vector2i.right">
            <summary>
            (1, 0)
            </summary>
        </member>
        <member name="P:CometEngine.Vector2i.up">
            <summary>
            (0, 1)
            </summary>
        </member>
        <member name="P:CometEngine.Vector2i.zero">
            <summary>
            (0, 0)
            </summary>
        </member>
        <member name="M:CometEngine.Vector2i.Abs">
            <summary>
            Returns a new Vector2i with absolut value of each component
            </summary>
        </member>
        <member name="M:CometEngine.Vector2i.Scale(CometEngine.Vector2i,CometEngine.Vector2i)">
            <summary>
            Returns a vector that is made from the largest components of two vectors.
            </summary>
        </member>
        <member name="M:CometEngine.Vector2i.CeilToInt(CometEngine.Vector2)">
            <summary>
            Converts a Vector2 to Vector2i using celing
            </summary>
        </member>
        <member name="M:CometEngine.Vector2i.FloorToInt(CometEngine.Vector2)">
            <summary>
            Converts a Vector2 to Vector2i using floor
            </summary>
        </member>
        <member name="M:CometEngine.Vector2i.RoundToInt(CometEngine.Vector2)">
            <summary>
            Converts a Vector2 to Vector2i using rounding
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.Lerp(CometEngine.Vector3,CometEngine.Vector3,System.Single)">
            <summary>
            Linearly interpolates between two vectors
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.Lerp(CometEngine.Vector3,CometEngine.Vector3,CometEngine.Vector3)">
            <summary>
            Linearly interpolates between two vectors
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.Project(CometEngine.Vector3,CometEngine.Vector3)">
            <summary>
            Projects a vector onto another vector.
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.LerpUnclamped(CometEngine.Vector3,CometEngine.Vector3,System.Single)">
            <summary>
            Linearly interpolates between two vectors
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.LerpUnclamped(CometEngine.Vector3,CometEngine.Vector3,CometEngine.Vector3)">
            <summary>
            Linearly interpolates between two vectors
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.Slerp(CometEngine.Vector3,CometEngine.Vector3,System.Single)">
            <summary>
            Spherically interpolates between two vectors
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.SlerpUnclamped(CometEngine.Vector3,CometEngine.Vector3,System.Single)">
            <summary>
            Spherically interpolates between two vectors
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.Max(CometEngine.Vector3,CometEngine.Vector3)">
            <summary>
            Returns a vector that is made from the largest components of two vectors.
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.Min(CometEngine.Vector3,CometEngine.Vector3)">
            <summary>
            Returns a vector that is made from the smallest components of two vectors.
            </summary>
        </member>
        <member name="P:CometEngine.Vector3.back">
            <summary>
            (0, 0, -1)
            </summary>
        </member>
        <member name="P:CometEngine.Vector3.down">
            <summary>
            (0, -1, 0)
            </summary>
        </member>
        <member name="P:CometEngine.Vector3.forward">
            <summary>
            (0, 0, 1)
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.MoveTowards(CometEngine.Vector3,System.Single)">
            <summary>
            Calculates a new position moving maxDelta
            </summary>
        </member>
        <member name="P:CometEngine.Vector3.left">
            <summary>
            (-1, 0, 0)
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.Abs">
            <summary>
            Returns a new Vector3 with absolut value of each component
            </summary>
        </member>
        <member name="P:CometEngine.Vector3.negativeInfinity">
            <summary>
            (float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity)
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.Scale(CometEngine.Vector3,CometEngine.Vector3)">
            <summary>
            Returns a vector that is made from the largest components of two vectors.
            </summary>
        </member>
        <member name="P:CometEngine.Vector3.one">
            <summary>
            (1, 1, 1)
            </summary>
        </member>
        <member name="P:CometEngine.Vector3.positiveInfinity">
            <summary>
            (float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity)
            </summary>
        </member>
        <member name="P:CometEngine.Vector3.right">
            <summary>
            (1, 0, 0)
            </summary>
        </member>
        <member name="P:CometEngine.Vector3.up">
            <summary>
            (0, 1, 0)
            </summary>
        </member>
        <member name="P:CometEngine.Vector3.zero">
            <summary>
            (0, 0, 0)
            </summary>
        </member>
        <member name="P:CometEngine.Vector3.length">
            <summary>
            Returns the length of the vector
            </summary>
        </member>
        <member name="P:CometEngine.Vector3.sqrLength">
            <summary>
            Returns the squared length of the vector
            </summary>
        </member>
        <member name="P:CometEngine.Vector3.normalized">
            <summary>
            Returns this vector with a magnitude of 1
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.Normalize">
            <summary>
            Makes this vector to have a length of 1.
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.Set(System.Single,System.Single,System.Single)">
            <summary>
            Set this vector with new x,y and z
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.Dot(CometEngine.Vector3,CometEngine.Vector3)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.Cross(CometEngine.Vector3,CometEngine.Vector3)">
            <summary>
            Returns the cross product of two vectors.
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.DistanceSqr(CometEngine.Vector3,CometEngine.Vector3)">
            <summary>
            Returns the squared distance between a and b
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.Distance(CometEngine.Vector3,CometEngine.Vector3)">
            <summary>
            Returns the distance between a and b
            </summary>
        </member>
        <member name="M:CometEngine.Vector3.Angle(CometEngine.Vector3,CometEngine.Vector3)">
            <summary>
            Returns the angle in degrees between from and to.
            </summary>
        </member>
        <member name="M:CometEngine.Vector3i.Max(CometEngine.Vector3i,CometEngine.Vector3i)">
            <summary>
            Returns a vector that is made from the largest components of two vectors.
            </summary>
        </member>
        <member name="M:CometEngine.Vector3i.Min(CometEngine.Vector3i,CometEngine.Vector3i)">
            <summary>
            Returns a vector that is made from the smallest components of two vectors.
            </summary>
        </member>
        <member name="P:CometEngine.Vector3i.back">
            <summary>
            (0, 0, -1)
            </summary>
        </member>
        <member name="P:CometEngine.Vector3i.down">
            <summary>
            (0, -1, 0)
            </summary>
        </member>
        <member name="P:CometEngine.Vector3i.forward">
            <summary>
            (0, 0, 1)
            </summary>
        </member>
        <member name="P:CometEngine.Vector3i.left">
            <summary>
            (-1, 0, 0)
            </summary>
        </member>
        <member name="M:CometEngine.Vector3i.Abs">
            <summary>
            Returns a new Vector3i with absolut value of each component
            </summary>
        </member>
        <member name="M:CometEngine.Vector3i.Scale(CometEngine.Vector3i,CometEngine.Vector3i)">
            <summary>
            Returns a vector that is made from the largest components of two vectors.
            </summary>
        </member>
        <member name="P:CometEngine.Vector3i.one">
            <summary>
            (1, 1, 1)
            </summary>
        </member>
        <member name="P:CometEngine.Vector3i.right">
            <summary>
            (1, 0, 0)
            </summary>
        </member>
        <member name="P:CometEngine.Vector3i.up">
            <summary>
            (0, 1, 0)
            </summary>
        </member>
        <member name="P:CometEngine.Vector3i.zero">
            <summary>
            (0, 0, 0)
            </summary>
        </member>
        <member name="P:CometEngine.Vector3i.length">
            <summary>
            Returns the length of the vector
            </summary>
        </member>
        <member name="P:CometEngine.Vector3i.sqrLength">
            <summary>
            Returns the squared length of the vector
            </summary>
        </member>
        <member name="M:CometEngine.Vector3i.Set(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set this vector with new x,y and z
            </summary>
        </member>
        <member name="M:CometEngine.Vector3i.DistanceSqr(CometEngine.Vector3i,CometEngine.Vector3i)">
            <summary>
            Returns the squared distance between a and b
            </summary>
        </member>
        <member name="M:CometEngine.Vector3i.CeilToInt(CometEngine.Vector3)">
            <summary>
            Converts a Vector3 to Vector3i using celing
            </summary>
        </member>
        <member name="M:CometEngine.Vector3i.FloorToInt(CometEngine.Vector3)">
            <summary>
            Converts a Vector3 to Vector3i using floor
            </summary>
        </member>
        <member name="M:CometEngine.Vector3i.RoundToInt(CometEngine.Vector3)">
            <summary>
            Converts a Vector3 to Vector3i using rounding
            </summary>
        </member>
        <member name="M:CometEngine.Vector3i.Distance(CometEngine.Vector3i,CometEngine.Vector3i)">
            <summary>
            Returns the distance between a and b
            </summary>
        </member>
    </members>
</doc>
